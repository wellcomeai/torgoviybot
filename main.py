"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è Bybit —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º
–í–µ–±-—Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OpenAI GPT-4
–û–±–Ω–æ–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ MarketAnalyzer
–û–±–Ω–æ–≤–ª–µ–Ω–æ: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π pybit v5.11.0
"""

import asyncio
import logging
import os
import sys
from contextlib import asynccontextmanager
from datetime import datetime
from typing import Optional

import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
from config.settings import Settings, get_settings
from core.websocket_manager import WebSocketManager
from strategies.base_strategy import BaseStrategy
from telegram_bot.bot import TelegramBot
from ai_analyzer.market_analyzer import MarketAnalyzer  # –ù–û–í–´–ô –ò–ú–ü–û–†–¢

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è Render)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()  # –¢–æ–ª—å–∫–æ console –¥–ª—è Render
    ]
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotManager:
    def __init__(self):
        self.settings: Optional[Settings] = None
        self.websocket_manager: Optional[WebSocketManager] = None
        self.telegram_bot: Optional[TelegramBot] = None
        self.strategy: Optional[BaseStrategy] = None
        self.market_analyzer: Optional[MarketAnalyzer] = None  # –ù–û–í–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢
        
        self.status = {
            "is_running": False,
            "start_time": None,
            "websocket_connected": False,
            "last_signal": None,
            "current_pair": "BTCUSDT",
            "strategy_status": "idle",
            "last_price": None,
            "signals_count": 0,
            "ai_analysis_enabled": False,  # –ù–û–í–´–ô –°–¢–ê–¢–£–°
            "ai_analysis_count": 0,  # –ù–û–í–´–ô –°–ß–ï–¢–ß–ò–ö
            "last_ai_analysis": None  # –ù–û–í–û–ï –ü–û–õ–ï
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞
bot_manager = BotManager()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await initialize_bot()
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    await cleanup_bot()


app = FastAPI(
    title="Bybit Trading Bot with AI Analysis",
    description="–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ Bybit —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º —á–µ—Ä–µ–∑ OpenAI GPT-4",
    version="2.1.0",
    lifespan=lifespan
)


async def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞ –≤–∫–ª—é—á–∞—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å pybit...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        bot_manager.settings = get_settings()
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è pybit
        logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ pybit v5.11.0")
        logger.info(f"   WebSocket: {bot_manager.settings.websocket_url}")
        logger.info(f"   REST API: {bot_manager.settings.bybit_rest_url}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        bot_manager.strategy = BaseStrategy(
            symbol=bot_manager.settings.TRADING_PAIR,
            timeframe=bot_manager.settings.STRATEGY_TIMEFRAME
        )
        logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {bot_manager.settings.TRADING_PAIR}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        bot_manager.websocket_manager = WebSocketManager(
            symbol=bot_manager.settings.TRADING_PAIR,
            strategy=bot_manager.strategy,
            on_signal_callback=on_trading_signal
        )
        
        # –ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await bot_manager.websocket_manager.start()
        logger.info("‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        if bot_manager.settings.AI_ANALYSIS_ENABLED:
            try:
                bot_manager.market_analyzer = MarketAnalyzer(
                    websocket_manager=bot_manager.websocket_manager
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
                analyzer_status = bot_manager.market_analyzer.get_status()
                
                if analyzer_status.get("openai_available") and analyzer_status.get("api_key_configured"):
                    logger.info("‚úÖ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    logger.info(f"   –ú–æ–¥–µ–ª—å: {bot_manager.settings.OPENAI_MODEL}")
                    logger.info(f"   –ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤: {bot_manager.settings.OPENAI_MAX_TOKENS}")
                    bot_manager.status["ai_analysis_enabled"] = True
                else:
                    logger.warning("‚ö†Ô∏è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ—à–∏–±–∫–∞–º–∏:")
                    if not analyzer_status.get("openai_available"):
                        logger.warning("   - OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    if not analyzer_status.get("api_key_configured"):
                        logger.warning("   - OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    bot_manager.market_analyzer = None
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
                bot_manager.market_analyzer = None
        else:
            logger.info("üì¥ –ò–ò-–∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
        if bot_manager.settings.is_telegram_configured:
            bot_manager.telegram_bot = TelegramBot(
                token=bot_manager.settings.TELEGRAM_BOT_TOKEN,
                chat_id=bot_manager.settings.TELEGRAM_CHAT_ID,
                websocket_manager=bot_manager.websocket_manager,
                market_analyzer=bot_manager.market_analyzer  # –ü–ï–†–ï–î–ê–ï–ú –ê–ù–ê–õ–ò–ó–ê–¢–û–†
            )
            await bot_manager.telegram_bot.start()
            logger.info("‚úÖ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º")
        else:
            logger.warning("‚ö†Ô∏è Telegram bot token –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ–ª–µ–≥—Ä–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        bot_manager.status.update({
            "is_running": True,
            "start_time": datetime.now(),
            "websocket_connected": True,
            "strategy_status": "active"
        })
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        logger.info("üìä –°–¢–ê–¢–£–° –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
        logger.info(f"   WebSocket: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' if bot_manager.websocket_manager.is_connected else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        logger.info(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if bot_manager.strategy else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
        logger.info(f"   Telegram: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if bot_manager.telegram_bot else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        logger.info(f"   –ò–ò-–∞–Ω–∞–ª–∏–∑: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if bot_manager.market_analyzer else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        bot_manager.status["is_running"] = False
        raise


async def cleanup_bot():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    try:
        bot_manager.status["is_running"] = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if bot_manager.websocket_manager:
            await bot_manager.websocket_manager.stop()
            logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        if bot_manager.telegram_bot:
            await bot_manager.telegram_bot.stop()
            logger.info("‚úÖ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        if bot_manager.market_analyzer:
            logger.info("‚úÖ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
        
        logger.info("‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


async def on_trading_signal(signal_data: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        logger.info(f"üìä –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_data}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        bot_manager.status["last_signal"] = signal_data
        bot_manager.status["signals_count"] += 1
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
        if bot_manager.telegram_bot:
            await bot_manager.telegram_bot.send_signal_notification(signal_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")


@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {
        "message": "Bybit Trading Bot with AI Analysis",
        "status": "running" if bot_manager.status["is_running"] else "stopped",
        "version": "2.1.0",
        "timestamp": datetime.now().isoformat(),
        "pair": bot_manager.status["current_pair"],
        "ai_enabled": bot_manager.status["ai_analysis_enabled"],
        "pybit_version": "5.11.0"
    }


@app.get("/health")
async def health_check():
    """Health check –¥–ª—è Render"""
    if not bot_manager.status["is_running"]:
        raise HTTPException(status_code=503, detail="Bot is not running")
    
    websocket_status = False
    if bot_manager.websocket_manager:
        websocket_status = bot_manager.websocket_manager.is_connected
    
    return {
        "status": "healthy",
        "uptime": str(datetime.now() - bot_manager.status["start_time"]) if bot_manager.status["start_time"] else None,
        "websocket": "connected" if websocket_status else "disconnected",
        "strategy": bot_manager.status["strategy_status"],
        "current_pair": bot_manager.status["current_pair"],
        "signals_count": bot_manager.status["signals_count"],
        "ai_analysis_enabled": bot_manager.status["ai_analysis_enabled"],
        "ai_analysis_count": bot_manager.status["ai_analysis_count"],
        "pybit_version": "5.11.0"
    }


@app.get("/status")
async def get_bot_status():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    websocket_status = False
    telegram_status = False
    ai_status = False
    
    if bot_manager.websocket_manager:
        websocket_status = bot_manager.websocket_manager.is_connected
    
    if bot_manager.telegram_bot:
        telegram_status = bot_manager.telegram_bot.is_running
    
    if bot_manager.market_analyzer:
        ai_analyzer_status = bot_manager.market_analyzer.get_status()
        ai_status = ai_analyzer_status.get("client_initialized", False)
    
    return {
        "bot_status": bot_manager.status,
        "components": {
            "websocket_manager": websocket_status,
            "telegram_bot": telegram_status,
            "strategy_active": bot_manager.strategy is not None,
            "ai_analyzer": ai_status,
            "openai_configured": bot_manager.settings.is_openai_configured if bot_manager.settings else False
        },
        "last_price": bot_manager.status.get("last_price"),
        "strategy_data": bot_manager.strategy.get_current_data() if bot_manager.strategy else None,
        "ai_analyzer_status": bot_manager.market_analyzer.get_status() if bot_manager.market_analyzer else None,
        "library_info": {
            "pybit_version": "5.11.0",
            "websocket_url": bot_manager.settings.websocket_url if bot_manager.settings else None,
            "rest_url": bot_manager.settings.bybit_rest_url if bot_manager.settings else None
        }
    }


@app.post("/start")
async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        if bot_manager.status["is_running"]:
            return {"message": "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω", "status": "running"}
        
        await initialize_bot()
        return {"message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", "status": "running"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")


@app.post("/stop")
async def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    try:
        if not bot_manager.status["is_running"]:
            return {"message": "–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "status": "stopped"}
        
        await cleanup_bot()
        return {"message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "status": "stopped"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}")


@app.get("/market/{symbol}")
async def get_market_info(symbol: str = "BTCUSDT"):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ"""
    try:
        if not bot_manager.websocket_manager:
            raise HTTPException(status_code=503, detail="WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        market_data = bot_manager.websocket_manager.get_market_data(symbol)
        
        if not market_data:
            raise HTTPException(status_code=404, detail=f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return market_data
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@app.get("/signals/latest")
async def get_latest_signals():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
    try:
        if not bot_manager.strategy:
            raise HTTPException(status_code=503, detail="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        
        signals = bot_manager.strategy.get_recent_signals(limit=10)
        
        return {
            "signals": signals,
            "total_signals": bot_manager.status["signals_count"],
            "last_signal": bot_manager.status["last_signal"]
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@app.get("/strategy/status")
async def get_strategy_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    try:
        if not bot_manager.strategy:
            raise HTTPException(status_code=503, detail="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        
        return bot_manager.strategy.get_status()
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


# –ù–û–í–´–ï ENDPOINTS –î–õ–Ø –ò–ò-–ê–ù–ê–õ–ò–ó–ê

@app.post("/ai/analyze")
async def ai_market_analysis():
    """–ó–∞–ø—É—Å–∫ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ API"""
    try:
        if not bot_manager.market_analyzer:
            raise HTTPException(
                status_code=503, 
                detail="–ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY."
            )
        
        if not bot_manager.settings.is_openai_configured:
            raise HTTPException(
                status_code=503,
                detail="OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
            )
        
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ API...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        market_data, ai_analysis = await bot_manager.market_analyzer.analyze_market(
            bot_manager.settings.TRADING_PAIR
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bot_manager.status["ai_analysis_count"] += 1
        bot_manager.status["last_ai_analysis"] = datetime.now()
        
        return {
            "success": True,
            "timestamp": datetime.now().isoformat(),
            "symbol": bot_manager.settings.TRADING_PAIR,
            "market_data": market_data,
            "ai_analysis": ai_analysis,
            "analysis_count": bot_manager.status["ai_analysis_count"]
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ API: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {str(e)}")


@app.get("/ai/status")
async def get_ai_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        if not bot_manager.market_analyzer:
            return {
                "ai_available": False,
                "reason": "–ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                "openai_configured": bot_manager.settings.is_openai_configured if bot_manager.settings else False,
                "analysis_enabled": bot_manager.settings.AI_ANALYSIS_ENABLED if bot_manager.settings else False
            }
        
        analyzer_status = bot_manager.market_analyzer.get_status()
        
        return {
            "ai_available": True,
            "analyzer_status": analyzer_status,
            "settings": {
                "model": bot_manager.settings.OPENAI_MODEL,
                "max_tokens": bot_manager.settings.OPENAI_MAX_TOKENS,
                "temperature": bot_manager.settings.OPENAI_TEMPERATURE,
                "analysis_enabled": bot_manager.settings.AI_ANALYSIS_ENABLED
            },
            "statistics": {
                "total_analyses": bot_manager.status["ai_analysis_count"],
                "last_analysis": bot_manager.status["last_ai_analysis"]
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ò–ò: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@app.get("/ai/config")
async def get_ai_config():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        if not bot_manager.settings:
            raise HTTPException(status_code=503, detail="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        return {
            "openai_configured": bot_manager.settings.is_openai_configured,
            "analysis_enabled": bot_manager.settings.AI_ANALYSIS_ENABLED,
            "model": bot_manager.settings.OPENAI_MODEL,
            "max_tokens": bot_manager.settings.OPENAI_MAX_TOKENS,
            "temperature": bot_manager.settings.OPENAI_TEMPERATURE,
            "timeout": bot_manager.settings.OPENAI_TIMEOUT,
            "data_settings": {
                "klines_count": bot_manager.settings.AI_KLINES_COUNT,
                "orderbook_levels": bot_manager.settings.AI_ORDERBOOK_LEVELS,
                "trades_count": bot_manager.settings.AI_TRADES_COUNT
            },
            "performance": {
                "max_concurrent_requests": bot_manager.settings.MAX_CONCURRENT_AI_REQUESTS,
                "retry_attempts": bot_manager.settings.AI_RETRY_ATTEMPTS,
                "cooldown_minutes": bot_manager.settings.AI_ANALYSIS_COOLDOWN_MINUTES
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ò–ò: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")
    return JSONResponse(
        status_code=500,
        content={"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "error": str(exc)}
    )


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ Render
    port = int(os.environ.get("PORT", 8000))
    host = "0.0.0.0"
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞ {host}:{port}")
    logger.info(f"üìä OpenAI –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'–î–∞' if os.getenv('OPENAI_API_KEY') else '–ù–µ—Ç'}")
    logger.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pybit v5.11.0 –¥–ª—è Bybit API")
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=False,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        log_level="info"
    )
