"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è Bybit
–í–µ–±-—Å–µ—Ä–≤–∏—Å –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render
"""

import asyncio
import logging
import os
import sys
from contextlib import asynccontextmanager
from datetime import datetime
from typing import Optional

import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
from config.settings import Settings, get_settings
from core.websocket_manager import WebSocketManager
from strategies.base_strategy import BaseStrategy
from telegram.bot import TelegramBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log')
    ]
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotManager:
    def __init__(self):
        self.settings: Optional[Settings] = None
        self.websocket_manager: Optional[WebSocketManager] = None
        self.telegram_bot: Optional[TelegramBot] = None
        self.strategy: Optional[BaseStrategy] = None
        
        self.status = {
            "is_running": False,
            "start_time": None,
            "websocket_connected": False,
            "last_signal": None,
            "current_pair": "BTCUSDT",
            "strategy_status": "idle",
            "last_price": None,
            "signals_count": 0
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞
bot_manager = BotManager()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await initialize_bot()
    
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    await cleanup_bot()


app = FastAPI(
    title="Bybit Trading Bot",
    description="–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ Bybit —Å —Ç–µ–ª–µ–≥—Ä–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏",
    version="1.0.0",
    lifespan=lifespan
)


async def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        bot_manager.settings = get_settings()
        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        bot_manager.strategy = BaseStrategy(
            symbol=bot_manager.settings.TRADING_PAIR,
            timeframe=bot_manager.settings.STRATEGY_TIMEFRAME
        )
        logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {bot_manager.settings.TRADING_PAIR}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        bot_manager.websocket_manager = WebSocketManager(
            symbol=bot_manager.settings.TRADING_PAIR,
            strategy=bot_manager.strategy,
            on_signal_callback=on_trading_signal
        )
        
        # –ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await bot_manager.websocket_manager.start()
        logger.info("‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        if bot_manager.settings.TELEGRAM_BOT_TOKEN:
            bot_manager.telegram_bot = TelegramBot(
                token=bot_manager.settings.TELEGRAM_BOT_TOKEN,
                chat_id=bot_manager.settings.TELEGRAM_CHAT_ID,
                websocket_manager=bot_manager.websocket_manager
            )
            await bot_manager.telegram_bot.start()
            logger.info("‚úÖ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è Telegram bot token –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–µ–ª–µ–≥—Ä–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        bot_manager.status.update({
            "is_running": True,
            "start_time": datetime.now(),
            "websocket_connected": True,
            "strategy_status": "active"
        })
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        bot_manager.status["is_running"] = False
        raise


async def cleanup_bot():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    try:
        bot_manager.status["is_running"] = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if bot_manager.websocket_manager:
            await bot_manager.websocket_manager.stop()
            logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        if bot_manager.telegram_bot:
            await bot_manager.telegram_bot.stop()
            logger.info("‚úÖ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        logger.info("‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


async def on_trading_signal(signal_data: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        logger.info(f"üìä –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_data}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        bot_manager.status["last_signal"] = signal_data
        bot_manager.status["signals_count"] += 1
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
        if bot_manager.telegram_bot:
            await bot_manager.telegram_bot.send_signal_notification(signal_data)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")


@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {
        "message": "Bybit Trading Bot API",
        "status": "running" if bot_manager.status["is_running"] else "stopped",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat(),
        "pair": bot_manager.status["current_pair"]
    }


@app.get("/health")
async def health_check():
    """Health check –¥–ª—è Render"""
    if not bot_manager.status["is_running"]:
        raise HTTPException(status_code=503, detail="Bot is not running")
    
    websocket_status = False
    if bot_manager.websocket_manager:
        websocket_status = bot_manager.websocket_manager.is_connected
    
    return {
        "status": "healthy",
        "uptime": str(datetime.now() - bot_manager.status["start_time"]) if bot_manager.status["start_time"] else None,
        "websocket": "connected" if websocket_status else "disconnected",
        "strategy": bot_manager.status["strategy_status"],
        "current_pair": bot_manager.status["current_pair"],
        "signals_count": bot_manager.status["signals_count"]
    }


@app.get("/status")
async def get_bot_status():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    websocket_status = False
    telegram_status = False
    
    if bot_manager.websocket_manager:
        websocket_status = bot_manager.websocket_manager.is_connected
    
    if bot_manager.telegram_bot:
        telegram_status = bot_manager.telegram_bot.is_running
    
    return {
        "bot_status": bot_manager.status,
        "components": {
            "websocket_manager": websocket_status,
            "telegram_bot": telegram_status,
            "strategy_active": bot_manager.strategy is not None
        },
        "last_price": bot_manager.status.get("last_price"),
        "strategy_data": bot_manager.strategy.get_current_data() if bot_manager.strategy else None
    }


@app.post("/start")
async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        if bot_manager.status["is_running"]:
            return {"message": "–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω", "status": "running"}
        
        await initialize_bot()
        return {"message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", "status": "running"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")


@app.post("/stop")
async def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    try:
        if not bot_manager.status["is_running"]:
            return {"message": "–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "status": "stopped"}
        
        await cleanup_bot()
        return {"message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "status": "stopped"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {str(e)}")


@app.get("/market/{symbol}")
async def get_market_info(symbol: str = "BTCUSDT"):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ"""
    try:
        if not bot_manager.websocket_manager:
            raise HTTPException(status_code=503, detail="WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        market_data = bot_manager.websocket_manager.get_market_data(symbol)
        
        if not market_data:
            raise HTTPException(status_code=404, detail=f"–î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return market_data
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@app.get("/signals/latest")
async def get_latest_signals():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
    try:
        if not bot_manager.strategy:
            raise HTTPException(status_code=503, detail="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        
        signals = bot_manager.strategy.get_recent_signals(limit=10)
        
        return {
            "signals": signals,
            "total_signals": bot_manager.status["signals_count"],
            "last_signal": bot_manager.status["last_signal"]
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@app.get("/strategy/status")
async def get_strategy_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    try:
        if not bot_manager.strategy:
            raise HTTPException(status_code=503, detail="–°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
        
        return bot_manager.strategy.get_status()
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞: {str(e)}")


@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")
    return JSONResponse(
        status_code=500,
        content={"detail": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "error": str(exc)}
    )


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ Render
    port = int(os.environ.get("PORT", 8000))
    host = "0.0.0.0"
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=False,  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        log_level="info"
    )
