"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –∫–Ω–æ–ø–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import logging
from datetime import datetime
from typing import Optional, Dict, Any
import html
import json

from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    BotCommand
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from telegram.constants import ParseMode
from telegram.error import TelegramError

from config.settings import get_settings


class TelegramBot:
    """–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, token: str, chat_id: str, websocket_manager=None):
        self.token = token
        self.chat_id = chat_id
        self.websocket_manager = websocket_manager
        self.settings = get_settings()
        
        self.application = None
        self.is_running = False
        
        self.logger = logging.getLogger(__name__)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.notifications_enabled = True
        self.user_settings = {
            "notifications": True,
            "signal_types": ["BUY", "SELL"],
            "min_confidence": 0.7
        }
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
        try:
            self.logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.application = Application.builder().token(self.token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            await self._register_handlers()
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
            await self._set_bot_commands()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            self.is_running = True
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_message(
                "üöÄ <b>–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                f"üìä –ü–∞—Ä–∞: {self.settings.TRADING_PAIR}\n"
                f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {self.settings.STRATEGY_TIMEFRAME}\n"
                f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: RSI + MA\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
                reply_markup=self._get_main_keyboard()
            )
            
            self.logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
        try:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
            
            self.is_running = False
            
            if self.application:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            
            self.logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")
    
    async def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._cmd_start))
        self.application.add_handler(CommandHandler("help", self._cmd_help))
        self.application.add_handler(CommandHandler("status", self._cmd_status))
        self.application.add_handler(CommandHandler("market", self._cmd_market))
        self.application.add_handler(CommandHandler("signals", self._cmd_signals))
        self.application.add_handler(CommandHandler("settings", self._cmd_settings))
        self.application.add_handler(CommandHandler("strategy", self._cmd_strategy))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self._handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
    
    async def _set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
        commands = [
            BotCommand("start", "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("help", "‚ùì –ü–æ–º–æ—â—å"),
            BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
            BotCommand("market", "üìà –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
            BotCommand("signals", "üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"),
            BotCommand("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            BotCommand("strategy", "üìä –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        ]
        
        await self.application.bot.set_my_commands(commands)
    
    def _get_main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        keyboard = [
            [
                InlineKeyboardButton("üìà –£–∑–Ω–∞—Ç—å —Ä—ã–Ω–æ–∫", callback_data="market_info"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="bot_status")
            ],
            [
                InlineKeyboardButton("üéØ –°–∏–≥–Ω–∞–ª—ã", callback_data="recent_signals"),
                InlineKeyboardButton("üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data="strategy_status")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def _get_settings_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        notifications_text = "üîî –í–∫–ª" if self.user_settings["notifications"] else "üîï –í—ã–∫–ª"
        
        keyboard = [
            [
                InlineKeyboardButton(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_text}", callback_data="toggle_notifications")
            ],
            [
                InlineKeyboardButton("üìä –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="signal_types"),
                InlineKeyboardButton("üéØ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", callback_data="min_confidence")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def _cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        await update.message.reply_text(
            "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç Bybit!</b>\n\n"
            f"üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: <code>{self.settings.TRADING_PAIR}</code>\n"
            f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: <code>{self.settings.STRATEGY_TIMEFRAME}</code>\n"
            f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: <b>RSI + Moving Average</b>\n\n"
            "–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_main_keyboard()
        )
    
    async def _cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/market - –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
/signals - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/strategy - –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

<b>–ö–Ω–æ–ø–∫–∏:</b>
üìà <b>–£–∑–Ω–∞—Ç—å —Ä—ã–Ω–æ–∫</b> - –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
üìä <b>–°—Ç–∞—Ç—É—Å</b> - –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
üéØ <b>–°–∏–≥–Ω–∞–ª—ã</b> - –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
üìä <b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è</b> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

<b>–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:</b>
‚Ä¢ üü¢ <b>BUY</b> - –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
‚Ä¢ üî¥ <b>SELL</b> - –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞ (0-100%)

<b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>
RSI + Moving Average - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ RSI –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
‚Ä¢ MA –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –°–∏–≥–Ω–∞–ª—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –¢–æ—Ä–≥—É–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!
        """
        
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_main_keyboard()
        )
    
    async def _cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if self.websocket_manager:
                connection_status = self.websocket_manager.get_connection_status()
                ws_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if connection_status["is_connected"] else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
                data_delay = connection_status.get("data_delay", 0)
                
                if data_delay > 60:
                    data_status = f"‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ {data_delay:.0f}—Å"
                elif data_delay > 10:
                    data_status = f"üü° –ó–∞–¥–µ—Ä–∂–∫–∞ {data_delay:.0f}—Å"
                else:
                    data_status = "üü¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ"
            else:
                ws_status = "üî¥ –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                data_status = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            status_text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

<b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b>
WebSocket: {ws_status}
–î–∞–Ω–Ω—ã–µ: {data_status}
Telegram: üü¢ –ê–∫—Ç–∏–≤–µ–Ω

<b>–¢–æ—Ä–≥–æ–≤–ª—è:</b>
–ü–∞—Ä–∞: <code>{self.settings.TRADING_PAIR}</code>
–¢–∞–π–º—Ñ—Ä–µ–π–º: <code>{self.settings.STRATEGY_TIMEFRAME}</code>
–†–µ–∂–∏–º: <code>{'TESTNET' if self.settings.BYBIT_WS_TESTNET else 'MAINNET'}</code>

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
–°—Ç–∞—Ç—É—Å: {'üîî –í–∫–ª—é—á–µ–Ω—ã' if self.user_settings['notifications'] else 'üîï –û—Ç–∫–ª—é—á–µ–Ω—ã'}
–¢–∏–ø—ã: {', '.join(self.user_settings['signal_types'])}
–ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.user_settings['min_confidence']:.0%}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="bot_status"),
                    InlineKeyboardButton("üìà –†—ã–Ω–æ–∫", callback_data="market_info")
                ],
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            await update.message.reply_text(
                status_text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def _cmd_market(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /market"""
        await self._send_market_info(update.message.chat_id)
    
    async def _cmd_signals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /signals"""
        await self._send_recent_signals(update.message.chat_id)
    
    async def _cmd_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /settings"""
        settings_text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'üîî –í–∫–ª—é—á–µ–Ω—ã' if self.user_settings['notifications'] else 'üîï –û—Ç–∫–ª—é—á–µ–Ω—ã'}
<b>–¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤:</b> {', '.join(self.user_settings['signal_types'])}
<b>–ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {self.user_settings['min_confidence']:.0%}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:
        """
        
        await update.message.reply_text(
            settings_text,
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_settings_keyboard()
        )
    
    async def _cmd_strategy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /strategy"""
        await self._send_strategy_status(update.message.chat_id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    async def _handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        try:
            if data == "main_menu":
                await query.edit_message_text(
                    "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self._get_main_keyboard()
                )
            
            elif data == "market_info":
                await self._send_market_info(query.message.chat_id, edit_message=True, message_id=query.message.message_id)
            
            elif data == "bot_status":
                await self._send_bot_status(query.message.chat_id, edit_message=True, message_id=query.message.message_id)
            
            elif data == "recent_signals":
                await self._send_recent_signals(query.message.chat_id, edit_message=True, message_id=query.message.message_id)
            
            elif data == "strategy_status":
                await self._send_strategy_status(query.message.chat_id, edit_message=True, message_id=query.message.message_id)
            
            elif data == "settings":
                await query.edit_message_text(
                    f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
                    f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'üîî –í–∫–ª—é—á–µ–Ω—ã' if self.user_settings['notifications'] else 'üîï –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
                    f"<b>–¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤:</b> {', '.join(self.user_settings['signal_types'])}\n"
                    f"<b>–ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {self.user_settings['min_confidence']:.0%}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self._get_settings_keyboard()
                )
            
            elif data == "toggle_notifications":
                self.user_settings["notifications"] = not self.user_settings["notifications"]
                status = "–≤–∫–ª—é—á–µ–Ω—ã" if self.user_settings["notifications"] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
                
                await query.edit_message_text(
                    f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
                    f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}!\n\n"
                    f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'üîî –í–∫–ª—é—á–µ–Ω—ã' if self.user_settings['notifications'] else 'üîï –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
                    f"<b>–¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤:</b> {', '.join(self.user_settings['signal_types'])}\n"
                    f"<b>–ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {self.user_settings['min_confidence']:.0%}",
                    parse_mode=ParseMode.HTML,
                    reply_markup=self._get_settings_keyboard()
                )
            
            elif data == "help":
                await self._cmd_help(update, context)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await query.edit_message_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    async def _handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        
        if "—Å—Ç–∞—Ç—É—Å" in text or "status" in text:
            await self._cmd_status(update, context)
        elif "—Ä—ã–Ω–æ–∫" in text or "market" in text:
            await self._cmd_market(update, context)
        elif "—Å–∏–≥–Ω–∞–ª" in text or "signal" in text:
            await self._cmd_signals(update, context)
        else:
            await update.message.reply_text(
                "ü§î –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=self._get_main_keyboard()
            )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    async def _send_market_info(self, chat_id: int, edit_message: bool = False, message_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—ã–Ω–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            if self.websocket_manager:
                market_data = self.websocket_manager.get_market_data()
            else:
                market_data = {}
            
            if market_data:
                trend_emoji = {"bullish": "üìà", "bearish": "üìâ", "sideways": "‚û°Ô∏è"}.get(market_data.get("trend", "sideways"), "‚û°Ô∏è")
                
                text = f"""
üìà <b>–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - {market_data.get('symbol', 'N/A')}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> <code>${market_data.get('price', 'N/A')}</code>
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> <code>{market_data.get('change_24h', 'N/A')}</code>
üìà <b>–ú–∞–∫—Å 24—á:</b> <code>${market_data.get('high_24h', 'N/A')}</code>
üìâ <b>–ú–∏–Ω 24—á:</b> <code>${market_data.get('low_24h', 'N/A')}</code>
üíπ <b>–û–±—ä–µ–º 24—á:</b> <code>{market_data.get('volume_24h', 'N/A')}</code>

üéØ <b>Bid:</b> <code>${market_data.get('bid', 'N/A')}</code>
üéØ <b>Ask:</b> <code>${market_data.get('ask', 'N/A')}</code>
üìè <b>–°–ø—Ä–µ–¥:</b> <code>${market_data.get('spread', 'N/A')}</code>

{trend_emoji} <b>–¢—Ä–µ–Ω–¥:</b> {market_data.get('trend', 'N/A').title()}

<i>üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>
                """
            else:
                text = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket."
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="market_info"),
                    InlineKeyboardButton("üéØ –°–∏–≥–Ω–∞–ª—ã", callback_data="recent_signals")
                ],
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            if edit_message and message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await self.send_message(text, reply_markup=InlineKeyboardMarkup(keyboard))
                
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}"
            if edit_message and message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=error_text
                )
            else:
                await self.send_message(error_text)
    
    async def _send_recent_signals(self, chat_id: int, edit_message: bool = False, message_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
            if self.websocket_manager and self.websocket_manager.strategy:
                signals = self.websocket_manager.strategy.get_recent_signals(limit=5)
            else:
                signals = []
            
            if signals:
                text = "üéØ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:</b>\n\n"
                
                for i, signal in enumerate(reversed(signals), 1):
                    signal_emoji = "üü¢" if signal['signal_type'] == "BUY" else "üî¥"
                    confidence_percent = signal['confidence'] * 100
                    
                    signal_time = datetime.fromisoformat(signal['timestamp'].replace('Z', '+00:00')) if isinstance(signal['timestamp'], str) else signal['timestamp']
                    time_str = signal_time.strftime('%H:%M:%S')
                    
                    text += f"{i}. {signal_emoji} <b>{signal['signal_type']}</b> @ <code>${signal['price']:.4f}</code>\n"
                    text += f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <b>{confidence_percent:.1f}%</b>\n"
                    text += f"   ‚è∞ –í—Ä–µ–º—è: {time_str}\n"
                    text += f"   üí≠ –ü—Ä–∏—á–∏–Ω–∞: {signal['reason'][:50]}...\n\n"
                
                text += f"<i>–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {len(signals)}</i>"
            else:
                text = "üì≠ <b>–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n\n–°–∏–≥–Ω–∞–ª—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="recent_signals"),
                    InlineKeyboardButton("üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data="strategy_status")
                ],
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            if edit_message and message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await self.send_message(text, reply_markup=InlineKeyboardMarkup(keyboard))
                
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}"
            if edit_message and message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=error_text
                )
            else:
                await self.send_message(error_text)
    
    async def _send_strategy_status(self, chat_id: int, edit_message: bool = False, message_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if self.websocket_manager and self.websocket_manager.strategy:
                status = self.websocket_manager.strategy.get_status()
                current_data = self.websocket_manager.strategy.get_current_data()
                indicators = current_data.get('current_indicators', {})
                
                text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏</b>

<b>–û—Å–Ω–æ–≤–Ω–æ–µ:</b>
–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {status['strategy_name']}
–ü–∞—Ä–∞: <code>{status['symbol']}</code>
–¢–∞–π–º—Ñ—Ä–µ–π–º: <code>{status['timeframe']}</code>
–°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if status['is_active'] else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}

<b>–î–∞–Ω–Ω—ã–µ:</b>
–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {status['data_points']}
–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {status['total_signals']}
–°–∏–≥–Ω–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {status['signals_today']}

<b>–¢–µ–∫—É—â–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
RSI: <code>{indicators.get('rsi', 0):.1f}</code>
MA –∫–æ—Ä–æ—Ç–∫–∞—è: <code>{indicators.get('sma_short', 0):.2f}</code>
MA –¥–ª–∏–Ω–Ω–∞—è: <code>{indicators.get('sma_long', 0):.2f}</code>
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>${indicators.get('current_price', 0):.4f}</code>

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
RSI –ø–µ—Ä–∏–æ–¥: {status['settings']['rsi_period']}
RSI —É—Ä–æ–≤–Ω–∏: {status['settings']['rsi_oversold']}/{status['settings']['rsi_overbought']}
MA –ø–µ—Ä–∏–æ–¥—ã: {status['settings']['ma_short']}/{status['settings']['ma_long']}
–ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {status['settings']['min_confidence']:.0%}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>
                """
            else:
                text = "‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="strategy_status"),
                    InlineKeyboardButton("üéØ –°–∏–≥–Ω–∞–ª—ã", callback_data="recent_signals")
                ],
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            if edit_message and message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                await self.send_message(text, reply_markup=InlineKeyboardMarkup(keyboard))
                
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}"
            if edit_message and message_id:
                await self.application.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=error_text
                )
            else:
                await self.send_message(error_text)
    
    async def _send_bot_status(self, chat_id: int, edit_message: bool = False, message_id: int = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ _cmd_status, –Ω–æ –¥–ª—è callback
        await self._send_market_info(chat_id, edit_message, message_id)  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async def send_signal_notification(self, signal_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
        try:
            if not self.user_settings["notifications"]:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            signal_type = signal_data.get("signal_type", "")
            if signal_type not in self.user_settings["signal_types"]:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = signal_data.get("confidence", 0)
            if confidence < self.user_settings["min_confidence"]:
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            signal_emoji = "üü¢" if signal_type == "BUY" else "üî¥" if signal_type == "SELL" else "üîµ"
            confidence_stars = "‚≠ê" * min(5, int(confidence * 5))
            
            text = f"""
üö® <b>–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ!</b>

{signal_emoji} <b>{signal_type} {signal_data.get('symbol', '')}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> <code>${signal_data.get('price', 0):.4f}</code>
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> <code>{confidence:.1%}</code> {confidence_stars}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}

üí≠ <b>–ü—Ä–∏—á–∏–Ω–∞:</b>
{signal_data.get('reason', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}

<b>–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:</b>
RSI: <code>{signal_data.get('indicators', {}).get('rsi', 0):.1f}</code>
MA: <code>{signal_data.get('indicators', {}).get('sma_short', 0):.2f}/{signal_data.get('indicators', {}).get('sma_long', 0):.2f}</code>

‚ö†Ô∏è <i>–¢–æ—Ä–≥—É–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!</i>
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üìà –£–∑–Ω–∞—Ç—å —Ä—ã–Ω–æ–∫", callback_data="market_info"),
                    InlineKeyboardButton("üéØ –í—Å–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="recent_signals")
                ]
            ]
            
            await self.send_message(text, reply_markup=InlineKeyboardMarkup(keyboard))
            
            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ: {signal_type} {signal_data.get('symbol', '')}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_message(self, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        try:
            await self.application.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        except TelegramError as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram: {e}")
        except Exception as e:
            self.logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
