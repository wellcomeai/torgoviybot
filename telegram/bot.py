"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –∫–Ω–æ–ø–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ô)
"""

import asyncio
import logging
from datetime import datetime
from typing import Optional, Dict, Any
import html
import json

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from telegram import (
        Update, 
        InlineKeyboardButton, 
        InlineKeyboardMarkup,
        BotCommand
    )
    from telegram.ext import (
        Application,
        CommandHandler,
        CallbackQueryHandler,
        MessageHandler,
        filters,
        ContextTypes
    )
    from telegram.constants import ParseMode
    from telegram.error import TelegramError
    
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤
    Update = None
    ContextTypes = None

from config.settings import get_settings


class TelegramBot:
    """–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)"""
    
    def __init__(self, token: str, chat_id: str, websocket_manager=None):
        self.token = token
        self.chat_id = chat_id
        self.websocket_manager = websocket_manager
        self.settings = get_settings()
        
        self.application = None
        self.is_running = False
        
        self.logger = logging.getLogger(__name__)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram
        if not TELEGRAM_AVAILABLE:
            self.logger.warning("‚ö†Ô∏è python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Telegram –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.notifications_enabled = True
        self.user_settings = {
            "notifications": True,
            "signal_types": ["BUY", "SELL"],
            "min_confidence": 0.7
        }
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
        if not TELEGRAM_AVAILABLE:
            self.logger.warning("‚ö†Ô∏è Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.")
            return
            
        try:
            self.logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.application = Application.builder().token(self.token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            await self._register_handlers()
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
            await self._set_bot_commands()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            self.is_running = True
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_message(
                "üöÄ <b>–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                f"üìä –ü–∞—Ä–∞: {self.settings.TRADING_PAIR}\n"
                f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: {self.settings.STRATEGY_TIMEFRAME}\n"
                f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: RSI + MA\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
                reply_markup=self._get_main_keyboard()
            )
            
            self.logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
        if not TELEGRAM_AVAILABLE or not self.application:
            return
            
        try:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
            
            self.is_running = False
            
            if self.application:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            
            self.logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")
    
    async def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        if not self.application:
            return
            
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._cmd_start))
        self.application.add_handler(CommandHandler("help", self._cmd_help))
        self.application.add_handler(CommandHandler("status", self._cmd_status))
        self.application.add_handler(CommandHandler("market", self._cmd_market))
        self.application.add_handler(CommandHandler("signals", self._cmd_signals))
        self.application.add_handler(CommandHandler("settings", self._cmd_settings))
        self.application.add_handler(CommandHandler("strategy", self._cmd_strategy))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self._handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
    
    async def _set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
        if not self.application:
            return
            
        commands = [
            BotCommand("start", "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("help", "‚ùì –ü–æ–º–æ—â—å"),
            BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
            BotCommand("market", "üìà –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
            BotCommand("signals", "üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"),
            BotCommand("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
            BotCommand("strategy", "üìä –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        ]
        
        await self.application.bot.set_my_commands(commands)
    
    def _get_main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
        if not TELEGRAM_AVAILABLE:
            return None
            
        keyboard = [
            [
                InlineKeyboardButton("üìà –£–∑–Ω–∞—Ç—å —Ä—ã–Ω–æ–∫", callback_data="market_info"),
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="bot_status")
            ],
            [
                InlineKeyboardButton("üéØ –°–∏–≥–Ω–∞–ª—ã", callback_data="recent_signals"),
                InlineKeyboardButton("üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è", callback_data="strategy_status")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def _get_settings_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if not TELEGRAM_AVAILABLE:
            return None
            
        notifications_text = "üîî –í–∫–ª" if self.user_settings["notifications"] else "üîï –í—ã–∫–ª"
        
        keyboard = [
            [
                InlineKeyboardButton(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_text}", callback_data="toggle_notifications")
            ],
            [
                InlineKeyboardButton("üìä –¢–∏–ø—ã —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="signal_types"),
                InlineKeyboardButton("üéØ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", callback_data="min_confidence")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (—É—Ä–µ–∑–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    async def _cmd_start(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        await update.message.reply_text(
            "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç Bybit!</b>\n\n"
            f"üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: <code>{self.settings.TRADING_PAIR}</code>\n"
            f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: <code>{self.settings.STRATEGY_TIMEFRAME}</code>\n"
            f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: <b>RSI + Moving Average</b>\n\n"
            "–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_main_keyboard()
        )
    
    async def _cmd_help(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞

<b>–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:</b>
‚Ä¢ üü¢ <b>BUY</b> - –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
‚Ä¢ üî¥ <b>SELL</b> - –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –°–∏–≥–Ω–∞–ª—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä!
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)
    
    async def _cmd_status(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        status_text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

<b>–¢–æ—Ä–≥–æ–≤–ª—è:</b>
–ü–∞—Ä–∞: <code>{self.settings.TRADING_PAIR}</code>
–¢–∞–π–º—Ñ—Ä–µ–π–º: <code>{self.settings.STRATEGY_TIMEFRAME}</code>
–†–µ–∂–∏–º: <code>{'TESTNET' if self.settings.BYBIT_WS_TESTNET else 'MAINNET'}</code>

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>
        """
        
        await update.message.reply_text(status_text, parse_mode=ParseMode.HTML)
    
    async def _cmd_market(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /market"""
        await update.message.reply_text("üìà –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def _cmd_signals(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /signals"""
        await update.message.reply_text("üéØ –°–∏–≥–Ω–∞–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def _cmd_settings(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /settings"""
        await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def _cmd_strategy(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /strategy"""
        await update.message.reply_text("üìä –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    async def _handle_callback(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def _handle_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏",
            reply_markup=self._get_main_keyboard()
        )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async def send_signal_notification(self, signal_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
        if not TELEGRAM_AVAILABLE:
            self.logger.info("üì§ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–ø—É—â–µ–Ω")
            return
            
        try:
            if not self.user_settings["notifications"]:
                return
            
            signal_type = signal_data.get("signal_type", "")
            confidence = signal_data.get("confidence", 0)
            
            if signal_type not in self.user_settings["signal_types"]:
                return
                
            if confidence < self.user_settings["min_confidence"]:
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            signal_emoji = "üü¢" if signal_type == "BUY" else "üî¥" if signal_type == "SELL" else "üîµ"
            
            text = f"""
üö® <b>–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ!</b>

{signal_emoji} <b>{signal_type} {signal_data.get('symbol', '')}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> <code>${signal_data.get('price', 0):.4f}</code>
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> <code>{confidence:.1%}</code>
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}

üí≠ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {signal_data.get('reason', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}

‚ö†Ô∏è <i>–¢–æ—Ä–≥—É–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!</i>
            """
            
            await self.send_message(text)
            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ: {signal_type}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_message(self, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
        if not TELEGRAM_AVAILABLE or not self.application:
            self.logger.info(f"üì§ [Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω] {text[:100]}...")
            return
            
        try:
            await self.application.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram: {e}")
