"""
–ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ OpenAI GPT-4
–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –∏ —É—Ä–æ–≤–Ω—è–º–∏ TP/SL
"""

import asyncio
import json
import logging
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any

try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

from config.settings import get_settings


class MarketAnalyzer:
    """–ò–ò –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ OpenAI GPT-4"""
    
    def __init__(self, websocket_manager=None):
        self.settings = get_settings()
        self.websocket_manager = websocket_manager
        self.logger = logging.getLogger(__name__)
        
        # OpenAI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.api_key = os.getenv("OPENAI_API_KEY", "")
        self.model = "gpt-4"
        self.max_tokens = 2000
        self.temperature = 0.3  # –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI
        if not OPENAI_AVAILABLE:
            self.logger.error("‚ùå OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return
        
        if not self.api_key:
            self.logger.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
        try:
            openai.api_key = self.api_key
            self.client = openai.OpenAI(api_key=self.api_key)
            self.logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
            self.client = None
    
    async def analyze_market(self, symbol: str = None) -> Tuple[Dict[str, Any], str]:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ –ò–ò
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (market_data, ai_analysis)
        """
        try:
            if not OPENAI_AVAILABLE:
                error_msg = "‚ùå OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai"
                self.logger.error(error_msg)
                return {}, error_msg
            
            if not self.client:
                error_msg = "‚ùå OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY"
                return {}, error_msg
            
            # –®–∞–≥ 1: –°–±–æ—Ä –≤—Å–µ—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol or '—Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞'}...")
            market_data = await self._collect_comprehensive_market_data(symbol)
            
            if not market_data:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                return {}, error_msg
            
            # –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è GPT-4
            prompt = self._create_analysis_prompt(market_data)
            
            # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI
            self.logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ GPT-4 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
            ai_analysis = await self._get_ai_analysis(prompt)
            
            if not ai_analysis:
                error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI"
                return market_data, error_msg
            
            self.logger.info("‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
            return market_data, ai_analysis
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {str(e)}"
            self.logger.error(error_msg)
            return {}, error_msg
    
    async def _collect_comprehensive_market_data(self, symbol: str = None) -> Dict[str, Any]:
        """–°–±–æ—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not self.websocket_manager:
                return {}
            
            # –ë–∞–∑–æ–≤—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            market_data = self.websocket_manager.get_market_data(symbol)
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            ws_status = self.websocket_manager.get_connection_status()
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            strategy_data = {}
            if hasattr(self.websocket_manager, 'strategy') and self.websocket_manager.strategy:
                strategy_data = self.websocket_manager.strategy.get_current_data()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            comprehensive_data = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                "basic_market": market_data,
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                "technical_indicators": strategy_data.get('current_indicators', {}),
                
                # –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
                "recent_klines": self._get_recent_klines_data(),
                
                # –û—Ä–¥–µ—Ä–±—É–∫ –¥–∞–Ω–Ω—ã–µ
                "orderbook": self._get_orderbook_summary(),
                
                # –î–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö
                "recent_trades": self._get_recent_trades_summary(),
                
                # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                "market_stats": self._calculate_market_statistics(),
                
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                "timestamp": datetime.now().isoformat(),
                "symbol": symbol or self.websocket_manager.symbol,
                "timeframe": self.settings.STRATEGY_TIMEFRAME,
                
                # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                "data_quality": {
                    "websocket_connected": ws_status.get("is_connected", False),
                    "data_delay": ws_status.get("data_delay", 0),
                    "klines_available": strategy_data.get('klines_count', 0),
                    "indicators_calculated": len(strategy_data.get('current_indicators', {}))
                }
            }
            
            return comprehensive_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def _get_recent_klines_data(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π"""
        try:
            if not hasattr(self.websocket_manager, 'kline_data'):
                return []
            
            klines = self.websocket_manager.kline_data[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π
            
            formatted_klines = []
            for kline in klines:
                formatted_klines.append({
                    "timestamp": kline.get("timestamp", 0),
                    "open": kline.get("open", 0),
                    "high": kline.get("high", 0),
                    "low": kline.get("low", 0),
                    "close": kline.get("close", 0),
                    "volume": kline.get("volume", 0)
                })
            
            return formatted_klines
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {e}")
            return []
    
    def _get_orderbook_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        try:
            if not hasattr(self.websocket_manager, 'orderbook_data'):
                return {}
            
            orderbook = self.websocket_manager.orderbook_data
            
            if not orderbook:
                return {}
            
            bids = orderbook.get("bids", [])[:10]  # –¢–æ–ø 10 bid'–æ–≤
            asks = orderbook.get("asks", [])[:10]  # –¢–æ–ø 10 ask'–æ–≤
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø—Ä–µ–¥ –∏ –≥–ª—É–±–∏–Ω—É —Ä—ã–Ω–∫–∞
            spread = 0
            if bids and asks:
                best_bid = float(bids[0][0]) if bids[0] else 0
                best_ask = float(asks[0][0]) if asks[0] else 0
                spread = best_ask - best_bid
            
            # –û–±—â–∏–π –æ–±—ä–µ–º –≤ –æ—Ä–¥–µ—Ä–±—É–∫–µ
            total_bid_volume = sum(float(bid[1]) for bid in bids if len(bid) > 1)
            total_ask_volume = sum(float(ask[1]) for ask in asks if len(ask) > 1)
            
            return {
                "spread": spread,
                "best_bid": float(bids[0][0]) if bids and bids[0] else 0,
                "best_ask": float(asks[0][0]) if asks and asks[0] else 0,
                "total_bid_volume": total_bid_volume,
                "total_ask_volume": total_ask_volume,
                "bid_ask_ratio": total_bid_volume / total_ask_volume if total_ask_volume > 0 else 0,
                "top_bids": bids[:5],
                "top_asks": asks[:5]
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞: {e}")
            return {}
    
    def _get_recent_trades_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            if not hasattr(self.websocket_manager, 'trade_data'):
                return {}
            
            trades = self.websocket_manager.trade_data[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–¥–µ–ª–æ–∫
            
            if not trades:
                return {}
            
            # –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫
            buy_trades = [t for t in trades if t.get("side", "").upper() == "BUY"]
            sell_trades = [t for t in trades if t.get("side", "").upper() == "SELL"]
            
            total_buy_volume = sum(t.get("size", 0) for t in buy_trades)
            total_sell_volume = sum(t.get("size", 0) for t in sell_trades)
            
            avg_trade_size = sum(t.get("size", 0) for t in trades) / len(trades) if trades else 0
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã
            recent_prices = [t.get("price", 0) for t in trades[-10:]]
            price_trend = "up" if recent_prices[-1] > recent_prices[0] else "down" if recent_prices else "neutral"
            
            return {
                "total_trades": len(trades),
                "buy_trades": len(buy_trades),
                "sell_trades": len(sell_trades),
                "buy_sell_ratio": len(buy_trades) / len(sell_trades) if sell_trades else 0,
                "total_buy_volume": total_buy_volume,
                "total_sell_volume": total_sell_volume,
                "volume_ratio": total_buy_volume / total_sell_volume if total_sell_volume > 0 else 0,
                "avg_trade_size": avg_trade_size,
                "price_trend": price_trend,
                "latest_price": recent_prices[-1] if recent_prices else 0
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–æ–∫: {e}")
            return {}
    
    def _calculate_market_statistics(self) -> Dict:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            stats = {}
            
            # –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–µ–π –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if hasattr(self.websocket_manager, 'kline_data') and self.websocket_manager.kline_data:
                klines = self.websocket_manager.kline_data[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π
                
                if klines:
                    closes = [k.get("close", 0) for k in klines]
                    highs = [k.get("high", 0) for k in klines]
                    lows = [k.get("low", 0) for k in klines]
                    volumes = [k.get("volume", 0) for k in klines]
                    
                    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è)
                    if len(closes) > 1:
                        mean_price = sum(closes) / len(closes)
                        variance = sum((price - mean_price) ** 2 for price in closes) / len(closes)
                        volatility = (variance ** 0.5) / mean_price * 100  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                        stats["volatility_percent"] = volatility
                    
                    # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º
                    stats["avg_volume"] = sum(volumes) / len(volumes) if volumes else 0
                    
                    # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
                    stats["price_range"] = {
                        "high": max(highs) if highs else 0,
                        "low": min(lows) if lows else 0,
                        "range_percent": ((max(highs) - min(lows)) / min(lows) * 100) if lows and min(lows) > 0 else 0
                    }
            
            return stats
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def _create_analysis_prompt(self, market_data: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è GPT-4 –∞–Ω–∞–ª–∏–∑–∞"""
        
        symbol = market_data.get("symbol", "UNKNOWN")
        timeframe = market_data.get("timeframe", "5m")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        basic_market = market_data.get("basic_market", {})
        indicators = market_data.get("technical_indicators", {})
        orderbook = market_data.get("orderbook", {})
        trades = market_data.get("recent_trades", {})
        stats = market_data.get("market_stats", {})
        
        prompt = f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤ —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –ü—Ä–æ–≤–µ–¥–∏ –ü–û–î–†–û–ë–ù–´–ô —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è {symbol} –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ {timeframe}.

üìä –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${basic_market.get('price', 'N/A')}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {basic_market.get('change_24h', 'N/A')}
–û–±—ä–µ–º 24—á: {basic_market.get('volume_24h', 'N/A')}
–ú–∞–∫—Å–∏–º—É–º 24—á: ${basic_market.get('high_24h', 'N/A')}
–ú–∏–Ω–∏–º—É–º 24—á: ${basic_market.get('low_24h', 'N/A')}
–°–ø—Ä–µ–¥: ${orderbook.get('spread', 'N/A')}

üìà –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:
RSI: {indicators.get('rsi', 'N/A')}
MA –∫–æ—Ä–æ—Ç–∫–∞—è ({self.settings.MA_SHORT_PERIOD}): {indicators.get('sma_short', 'N/A')}
MA –¥–ª–∏–Ω–Ω–∞—è ({self.settings.MA_LONG_PERIOD}): {indicators.get('sma_long', 'N/A')}
EMA –∫–æ—Ä–æ—Ç–∫–∞—è: {indicators.get('ema_short', 'N/A')}
EMA –¥–ª–∏–Ω–Ω–∞—è: {indicators.get('ema_long', 'N/A')}
MACD: {indicators.get('macd', 'N/A')}
MACD Signal: {indicators.get('signal', 'N/A')}
Bollinger Upper: {indicators.get('bb_upper', 'N/A')}
Bollinger Middle: {indicators.get('bb_middle', 'N/A')}
Bollinger Lower: {indicators.get('bb_lower', 'N/A')}
–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {stats.get('volatility_percent', 'N/A')}%

üìö –û–†–î–ï–†–ë–£–ö:
–õ—É—á—à–∏–π BID: ${orderbook.get('best_bid', 'N/A')}
–õ—É—á—à–∏–π ASK: ${orderbook.get('best_ask', 'N/A')}
–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ BID/ASK –æ–±—ä–µ–º–æ–≤: {orderbook.get('bid_ask_ratio', 'N/A')}
–û–±—â–∏–π –æ–±—ä–µ–º BID: {orderbook.get('total_bid_volume', 'N/A')}
–û–±—â–∏–π –æ–±—ä–µ–º ASK: {orderbook.get('total_ask_volume', 'N/A')}

üíπ –ê–ù–ê–õ–ò–ó –°–î–ï–õ–û–ö:
–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {trades.get('total_trades', 'N/A')}
–ü–æ–∫—É–ø–∫–∏: {trades.get('buy_trades', 'N/A')}
–ü—Ä–æ–¥–∞–∂–∏: {trades.get('sell_trades', 'N/A')}
–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂: {trades.get('buy_sell_ratio', 'N/A')}
–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤: {trades.get('volume_ratio', 'N/A')}
–¢—Ä–µ–Ω–¥ —Ü–µ–Ω—ã: {trades.get('price_trend', 'N/A')}

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ–¥–∏ –ì–õ–£–ë–û–ö–ò–ô —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –¥–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:

1. üìä –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:
   - –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
   - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π, —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π)
   - –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
   - –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

2. üéØ –¢–û–†–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: BUY/SELL/HOLD —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
   - –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞)
   - STOP LOSS (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–Ω–∞ –∏ % –æ—Ç –≤—Ö–æ–¥–∞)
   - TAKE PROFIT —É—Ä–æ–≤–Ω–∏ (TP1, TP2, TP3 —Å —Ü–µ–Ω–∞–º–∏)
   - –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞)

3. üìà –ü–†–û–ì–ù–û–ó:
   - –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (1-4 —á–∞—Å–∞)
   - –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (1-3 –¥–Ω—è)
   - –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
   - –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è

4. ‚ö†Ô∏è –†–ò–°–ö–ò:
   - –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
   - –£—Ä–æ–≤–Ω–∏ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
   - –°–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ü–µ–Ω—É

–û—Ç–≤–µ—á–∞–π –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–û —Å —ç–º–æ–¥–∑–∏, –±—É–¥—å –ö–û–ù–ö–†–ï–¢–ù–´–ú –≤ —Ü–µ–Ω–∞—Ö –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö. –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Ñ—å—é—á–µ—Ä—Å–∞–º–∏!"""

        return prompt
    
    async def _get_ai_analysis(self, prompt: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç OpenAI GPT-4"""
        try:
            if not self.client:
                return "‚ùå OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT-4
            response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: self.client.chat.completions.create(
                    model=self.model,
                    messages=[
                        {
                            "role": "system",
                            "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä-–∞–Ω–∞–ª–∏—Ç–∏–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."
                        },
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ],
                    max_tokens=self.max_tokens,
                    temperature=self.temperature
                )
            )
            
            if response and response.choices:
                analysis = response.choices[0].message.content
                self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–Ω–∞–ª–∏–∑ –æ—Ç GPT-4 ({len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return analysis
            else:
                return "‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI"
                
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {error_msg}")
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ OpenAI
            if "invalid api key" in error_msg.lower():
                return "‚ùå –ù–ï–í–ï–†–ù–´–ô OPENAI_API_KEY! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            elif "insufficient_quota" in error_msg.lower():
                return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OpenAI API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞."
            elif "rate_limit" in error_msg.lower():
                return "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ OpenAI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {error_msg}"
    
    def format_market_data_message(self, market_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞"""
        try:
            basic_market = market_data.get("basic_market", {})
            indicators = market_data.get("technical_indicators", {})
            orderbook = market_data.get("orderbook", {})
            trades = market_data.get("recent_trades", {})
            
            symbol = market_data.get("symbol", "UNKNOWN")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é
            change_24h = basic_market.get("change_24h", "0%")
            if "%" in str(change_24h):
                change_value = float(change_24h.replace("%", "").replace("+", ""))
                trend_emoji = "üöÄ" if change_value > 2 else "üìà" if change_value > 0 else "üìâ" if change_value < -2 else "‚û°Ô∏è"
            else:
                trend_emoji = "üìä"
            
            # RSI —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            rsi = indicators.get("rsi", 50)
            rsi_emoji = "üî•" if rsi > 70 else "‚ùÑÔ∏è" if rsi < 30 else "‚öñÔ∏è"
            
            message = f"""
üìä <b>–†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï - {symbol}</b> {trend_emoji}

üí∞ <b>–¶–µ–Ω–∞:</b> <code>${basic_market.get('price', 'N/A')}</code>
üìà <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á:</b> <code>{basic_market.get('change_24h', 'N/A')}</code>
üìä <b>–û–±—ä–µ–º 24—á:</b> <code>{basic_market.get('volume_24h', 'N/A')}</code>

üîù <b>–ú–∞–∫—Å–∏–º—É–º 24—á:</b> <code>${basic_market.get('high_24h', 'N/A')}</code>
üîª <b>–ú–∏–Ω–∏–º—É–º 24—á:</b> <code>${basic_market.get('low_24h', 'N/A')}</code>

üìä <b>–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:</b>
{rsi_emoji} <b>RSI:</b> <code>{rsi:.1f}</code>
üìà <b>MA –∫–æ—Ä–æ—Ç–∫–∞—è:</b> <code>{indicators.get('sma_short', 0):.2f}</code>
üìâ <b>MA –¥–ª–∏–Ω–Ω–∞—è:</b> <code>{indicators.get('sma_long', 0):.2f}</code>

üìö <b>–û–†–î–ï–†–ë–£–ö:</b>
üíö <b>–õ—É—á—à–∏–π BID:</b> <code>${orderbook.get('best_bid', 0):.4f}</code>
‚ù§Ô∏è <b>–õ—É—á—à–∏–π ASK:</b> <code>${orderbook.get('best_ask', 0):.4f}</code>
‚ö° <b>–°–ø—Ä–µ–¥:</b> <code>${orderbook.get('spread', 0):.4f}</code>

üíπ <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨:</b>
üîÑ <b>–°–¥–µ–ª–æ–∫:</b> <code>{trades.get('total_trades', 0)}</code>
üìä <b>–ü–æ–∫—É–ø–∫–∏/–ü—Ä–æ–¥–∞–∂–∏:</b> <code>{trades.get('buy_trades', 0)}/{trades.get('sell_trades', 0)}</code>

üïê <i>–î–∞–Ω–Ω—ã–µ –Ω–∞ {datetime.now().strftime('%H:%M:%S')}</i>
            """
            
            return message.strip()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}"
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        return {
            "openai_available": OPENAI_AVAILABLE,
            "api_key_configured": bool(self.api_key),
            "client_initialized": self.client is not None,
            "model": self.model,
            "max_tokens": self.max_tokens,
            "temperature": self.temperature,
            "websocket_manager": self.websocket_manager is not None
        }
