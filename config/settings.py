"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import os
from typing import Optional
from pydantic import BaseSettings
from pydantic import Field


class Settings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    APP_NAME: str = "Bybit Trading Bot"
    APP_VERSION: str = "1.0.0"
    DEBUG: bool = Field(default=False, env="DEBUG")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
    TRADING_PAIR: str = Field(default="BTCUSDT", env="TRADING_PAIR")
    STRATEGY_TIMEFRAME: str = Field(default="5m", env="STRATEGY_TIMEFRAME")  # 1m, 3m, 5m, 15m, 30m, 1h, 4h, 1d
    
    # Bybit WebSocket –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    BYBIT_WS_TESTNET: bool = Field(default=True, env="BYBIT_WS_TESTNET")
    BYBIT_WS_LINEAR_URL: str = Field(
        default="wss://stream-testnet.bybit.com/v5/public/linear",
        env="BYBIT_WS_LINEAR_URL"
    )
    BYBIT_WS_MAINNET_URL: str = "wss://stream.bybit.com/v5/public/linear"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ RSI + MA
    RSI_PERIOD: int = Field(default=14, env="RSI_PERIOD")
    RSI_OVERSOLD: float = Field(default=30.0, env="RSI_OVERSOLD")
    RSI_OVERBOUGHT: float = Field(default=70.0, env="RSI_OVERBOUGHT")
    
    MA_SHORT_PERIOD: int = Field(default=9, env="MA_SHORT_PERIOD")
    MA_LONG_PERIOD: int = Field(default=21, env="MA_LONG_PERIOD")
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ (0.0 - 1.0)
    MIN_SIGNAL_CONFIDENCE: float = Field(default=0.7, env="MIN_SIGNAL_CONFIDENCE")
    
    # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    TELEGRAM_BOT_TOKEN: Optional[str] = Field(default=None, env="TELEGRAM_BOT_TOKEN")
    TELEGRAM_CHAT_ID: Optional[str] = Field(default=None, env="TELEGRAM_CHAT_ID")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_LEVEL: str = Field(default="INFO", env="LOG_LEVEL")
    # LOG_FILE —É–±–∏—Ä–∞–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Render
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket
    WS_PING_INTERVAL: int = Field(default=20, env="WS_PING_INTERVAL")  # —Å–µ–∫—É–Ω–¥—ã
    WS_RECONNECT_ATTEMPTS: int = Field(default=5, env="WS_RECONNECT_ATTEMPTS")
    WS_RECONNECT_DELAY: int = Field(default=5, env="WS_RECONNECT_DELAY")  # —Å–µ–∫—É–Ω–¥—ã
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    KLINE_LIMIT: int = Field(default=100, env="KLINE_LIMIT")  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    DATA_RETENTION_HOURS: int = Field(default=24, env="DATA_RETENTION_HOURS")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    NOTIFY_ALL_SIGNALS: bool = Field(default=True, env="NOTIFY_ALL_SIGNALS")
    NOTIFY_HIGH_CONFIDENCE_ONLY: bool = Field(default=False, env="NOTIFY_HIGH_CONFIDENCE_ONLY")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    MAX_DAILY_SIGNALS: int = Field(default=100, env="MAX_DAILY_SIGNALS")
    SIGNAL_COOLDOWN_MINUTES: int = Field(default=5, env="SIGNAL_COOLDOWN_MINUTES")
    
    @property
    def websocket_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL WebSocket –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        if self.BYBIT_WS_TESTNET:
            return "wss://stream-testnet.bybit.com/v5/public/linear"
        return self.BYBIT_WS_MAINNET_URL
    
    @property
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"""
        return not self.BYBIT_WS_TESTNET
    
    def get_kline_subscription(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ"""
        return f"kline.{self.STRATEGY_TIMEFRAME}.{self.TRADING_PAIR}"
    
    def get_ticker_subscription(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ticker –¥–∞–Ω–Ω—ã–µ"""
        return f"tickers.{self.TRADING_PAIR}"
    
    def get_orderbook_subscription(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ orderbook –¥–∞–Ω–Ω—ã–µ"""
        return f"orderbook.50.{self.TRADING_PAIR}"
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = True


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
_settings: Optional[Settings] = None


def get_settings() -> Settings:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å–∏–Ω–≥–ª—Ç–æ–Ω)"""
    global _settings
    
    if _settings is None:
        _settings = Settings()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        import logging
        logger = logging.getLogger(__name__)
        
        logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        logger.info(f"   –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: {_settings.TRADING_PAIR}")
        logger.info(f"   –¢–∞–π–º—Ñ—Ä–µ–π–º: {_settings.STRATEGY_TIMEFRAME}")
        logger.info(f"   –†–µ–∂–∏–º: {'TESTNET' if _settings.BYBIT_WS_TESTNET else 'MAINNET'}")
        logger.info(f"   WebSocket URL: {_settings.websocket_url}")
        logger.info(f"   Telegram: {'–í–∫–ª—é—á–µ–Ω' if _settings.TELEGRAM_BOT_TOKEN else '–û—Ç–∫–ª—é—á–µ–Ω'}")
        logger.info(f"   RSI –ø–µ—Ä–∏–æ–¥: {_settings.RSI_PERIOD}")
        logger.info(f"   MA –ø–µ—Ä–∏–æ–¥—ã: {_settings.MA_SHORT_PERIOD}/{_settings.MA_LONG_PERIOD}")
        
    return _settings


def validate_settings(settings: Settings) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    if not settings.TRADING_PAIR or len(settings.TRADING_PAIR) < 3:
        errors.append("–ù–µ–≤–µ—Ä–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    valid_timeframes = ["1m", "3m", "5m", "15m", "30m", "1h", "2h", "4h", "6h", "12h", "1d"]
    if settings.STRATEGY_TIMEFRAME not in valid_timeframes:
        errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {valid_timeframes}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RSI –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if not (5 <= settings.RSI_PERIOD <= 50):
        errors.append("RSI –ø–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 5 –∏ 50")
    
    if not (10 <= settings.RSI_OVERSOLD <= 40):
        errors.append("RSI oversold –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 10 –∏ 40")
    
    if not (60 <= settings.RSI_OVERBOUGHT <= 90):
        errors.append("RSI overbought –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 60 –∏ 90")
    
    if settings.RSI_OVERSOLD >= settings.RSI_OVERBOUGHT:
        errors.append("RSI oversold –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ overbought")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MA –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if settings.MA_SHORT_PERIOD >= settings.MA_LONG_PERIOD:
        errors.append("–ö–æ—Ä–æ—Ç–∫–∞—è MA –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –¥–ª–∏–Ω–Ω–æ–π MA")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞
    if not (0.0 <= settings.MIN_SIGNAL_CONFIDENCE <= 1.0):
        errors.append("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 0.0 –∏ 1.0")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if settings.TELEGRAM_BOT_TOKEN and not settings.TELEGRAM_CHAT_ID:
        errors.append("–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω Telegram token, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å chat_id")
    
    if errors:
        import logging
        logger = logging.getLogger(__name__)
        logger.error("‚ùå –û—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:")
        for error in errors:
            logger.error(f"   - {error}")
        return False
    
    return True


def get_env_example() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞"""
    return """# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
DEBUG=false
TRADING_PAIR=BTCUSDT
STRATEGY_TIMEFRAME=5m

# Bybit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BYBIT_WS_TESTNET=true

# –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
RSI_PERIOD=14
RSI_OVERSOLD=30.0
RSI_OVERBOUGHT=70.0
MA_SHORT_PERIOD=9
MA_LONG_PERIOD=21
MIN_SIGNAL_CONFIDENCE=0.7

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN=your_bot_token_here
TELEGRAM_CHAT_ID=your_chat_id_here

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
LOG_LEVEL=INFO
WS_PING_INTERVAL=20
KLINE_LIMIT=100
MAX_DAILY_SIGNALS=100
SIGNAL_COOLDOWN_MINUTES=5
"""
