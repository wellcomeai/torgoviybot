"""
WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit
–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
–ò–°–ü–†–ê–í–õ–ï–ù–û: HTTP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ticker –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import json
import logging
import time
import math
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable, Any
import websockets
from websockets.exceptions import ConnectionClosed, WebSocketException
import httpx

from config.settings import get_settings


class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit"""
    
    def __init__(self, symbol: str, strategy, on_signal_callback: Optional[Callable] = None):
        self.settings = get_settings()
        self.symbol = symbol
        self.strategy = strategy
        self.on_signal_callback = on_signal_callback
        
        self.websocket = None
        self.is_connected = False
        self.reconnect_count = 0
        self.last_ping = 0
        self.last_data_time = time.time()
        
        # HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è REST API –∑–∞–ø—Ä–æ—Å–æ–≤
        self.http_client = httpx.AsyncClient(timeout=10.0)
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.ticker_data = {}
        self.kline_data = []
        self.orderbook_data = {}
        self.trade_data = []
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
        self.extended_kline_data = []
        self.extended_orderbook_history = []
        self.volume_profile = {}
        self.price_levels = {"support": [], "resistance": []}
        
        # –ó–∞–¥–∞—á–∏ asyncio
        self.ping_task = None
        self.reconnect_task = None
        self.main_task = None
        
        # –õ–∏–º–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        self.max_klines = self.settings.KLINE_LIMIT
        self.max_trades = 1000
        self.max_extended_klines = self.settings.AI_KLINES_COUNT
        self.max_orderbook_history = 50
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.message_counts = {
            "total": 0,
            "ticker": 0,
            "kline": 0,
            "orderbook": 0,
            "trade": 0,
            "ping": 0,
            "subscribe": 0,
            "unknown": 0
        }
        
        self.logger = logging.getLogger(__name__)
        self.logger.info(f"WebSocket Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol}")
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            self.logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit WebSocket...")
            self.logger.info(f"   URL: {self.settings.websocket_url}")
            self.logger.info(f"   REST API: {self.settings.bybit_rest_url}")
            self.logger.info(f"   –°–∏–º–≤–æ–ª: {self.symbol}")
            self.logger.info(f"   –¢–∞–π–º—Ñ—Ä–µ–π–º: {self.settings.STRATEGY_TIMEFRAME}")
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
            self.main_task = asyncio.create_task(self._main_loop())
            
            # –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for attempt in range(10):
                if self.is_connected:
                    break
                await asyncio.sleep(1)
                self.logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è... –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10")
            
            if not self.is_connected:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥")
            
            self.logger.info("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            
            self.is_connected = False
            
            # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
            if self.main_task and not self.main_task.done():
                self.main_task.cancel()
            
            if self.ping_task and not self.ping_task.done():
                self.ping_task.cancel()
            
            if self.reconnect_task and not self.reconnect_task.done():
                self.reconnect_task.cancel()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.websocket:
                await self.websocket.close()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞
            await self.http_client.aclose()
                
            self.logger.info("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: {e}")
    
    async def get_fresh_ticker_data(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–∏—Ö ticker –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ HTTP REST API"""
        try:
            self.logger.info(f"üåê –ó–∞–ø—Ä–æ—Å —Å–≤–µ–∂–∏—Ö ticker –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ HTTP –¥–ª—è {self.symbol}...")
            
            url = f"{self.settings.bybit_rest_url}/v5/market/tickers"
            params = {
                "category": "linear",
                "symbol": self.symbol
            }
            
            response = await self.http_client.get(url, params=params)
            
            if response.status_code != 200:
                self.logger.error(f"HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
                return {}
            
            data = response.json()
            
            if data.get("retCode") != 0:
                self.logger.error(f"Bybit API –æ—à–∏–±–∫–∞: {data.get('retMsg', 'Unknown error')}")
                return {}
            
            ticker_list = data.get("result", {}).get("list", [])
            
            if not ticker_list:
                self.logger.error(f"–ù–µ—Ç ticker –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.symbol}")
                return {}
            
            fresh_ticker = ticker_list[0]
            
            self.logger.info(f"‚úÖ HTTP ticker –ø–æ–ª—É—á–µ–Ω: {fresh_ticker.get('symbol')} @ ${fresh_ticker.get('lastPrice')}")
            self.logger.info(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {float(fresh_ticker.get('price24hPcnt', 0)) * 100:.2f}%")
            self.logger.info(f"   –û–±—ä–µ–º 24—á: {fresh_ticker.get('volume24h', 0)}")
            
            return fresh_ticker
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ ticker –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while True:
            try:
                await self._connect_and_subscribe()
                await self._listen_messages()
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ WebSocket: {e}")
                self.is_connected = False
                
                if self.reconnect_count < self.settings.WS_RECONNECT_ATTEMPTS:
                    self.reconnect_count += 1
                    delay = self.settings.WS_RECONNECT_DELAY * self.reconnect_count
                    self.logger.info(f"–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {self.reconnect_count})")
                    await asyncio.sleep(delay)
                else:
                    self.logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    break
    
    async def _connect_and_subscribe(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ"""
        try:
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
            self.websocket = await websockets.connect(
                self.settings.websocket_url,
                ping_interval=None,
                ping_timeout=None,
                close_timeout=10
            )
            
            self.logger.info(f"WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {self.settings.websocket_url}")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ë–ï–ó ticker (–±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTP)
            subscriptions = [
                self.settings.get_kline_subscription(),        # kline.5.BTCUSDT  
                self.settings.get_orderbook_subscription(),    # orderbook.50.BTCUSDT
                self.settings.get_trade_subscription()         # publicTrade.BTCUSDT
            ]
            
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç–æ–ø–∏–∫–∏: {subscriptions}")
            
            subscribe_message = {
                "op": "subscribe",
                "args": subscriptions
            }
            
            await self.websocket.send(json.dumps(subscribe_message))
            self.logger.info("–ó–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–ë–ï–ó ticker - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP)")
            
            # –ó–∞–ø—É—Å–∫ ping –∑–∞–¥–∞—á–∏ (–æ—Ç–ø—Ä–∞–≤–∫–∞ ping –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫)
            if self.ping_task and not self.ping_task.done():
                self.ping_task.cancel()
            
            self.ping_task = asyncio.create_task(self._ping_loop())
            
            self.is_connected = True
            self.reconnect_count = 0
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise
    
    async def _listen_messages(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket"""
        self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        async for message in self.websocket:
            try:
                self.message_counts["total"] += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if self.message_counts["total"] <= 10 or self.message_counts["total"] % 100 == 0:
                    self.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{self.message_counts['total']}: {message[:200]}...")
                
                data = json.loads(message)
                await self._handle_message(data)
                self.last_data_time = time.time()
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if self.message_counts["total"] % 50 == 0:
                    self._log_message_statistics()
                
            except json.JSONDecodeError as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _log_message_statistics(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.logger.info("=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===")
        for msg_type, count in self.message_counts.items():
            self.logger.info(f"  {msg_type}: {count}")
        self.logger.info(f"=== –î–ê–ù–ù–´–ï –í –ü–ê–ú–Ø–¢–ò ===")
        self.logger.info(f"  ticker_data: {bool(self.ticker_data)} (—á–µ—Ä–µ–∑ HTTP)")
        self.logger.info(f"  kline_data: {len(self.kline_data)}")
        self.logger.info(f"  orderbook_data: {bool(self.orderbook_data)}")
        self.logger.info(f"  trade_data: {len(self.trade_data)}")
    
    async def _handle_message(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            op = data.get("op", "")
            topic = data.get("topic", "")
            success = data.get("success", None)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            if op == "ping":
                self.message_counts["ping"] += 1
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ç–µ–º–∏ –∂–µ args
                pong_message = {"op": "pong", "args": data.get("args", [])}
                await self.websocket.send(json.dumps(pong_message))
                self.logger.debug(f"–û—Ç–≤–µ—Ç–∏–ª–∏ pong –Ω–∞ ping: {data.get('args', [])}")
                return
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            if success is not None and op == "subscribe":
                self.message_counts["subscribe"] += 1
                if success:
                    self.logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞: {data.get('ret_msg', 'OK')}")
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {data.get('ret_msg', 'Unknown error')}")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–æ–ø–∏–∫–∞–º
            if topic:
                self.logger.debug(f"–¢–æ–ø–∏–∫: '{topic}', —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(data.get('data', []))}")
                
                if topic.startswith("tickers."):
                    # –ò–ì–ù–û–†–ò–†–£–ï–ú ticker –¥–∞–Ω–Ω—ã–µ –∏–∑ WebSocket
                    self.message_counts["ticker"] += 1
                    self.logger.debug("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º WebSocket ticker –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP)")
                elif topic.startswith("kline."):
                    self.message_counts["kline"] += 1
                    await self._handle_kline_data(data)
                elif topic.startswith("orderbook."):
                    self.message_counts["orderbook"] += 1
                    await self._handle_orderbook_data(data)
                elif topic.startswith("publicTrade."):
                    self.message_counts["trade"] += 1
                    await self._handle_trade_data(data)
                else:
                    self.message_counts["unknown"] += 1
                    self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫: {topic}")
            else:
                self.message_counts["unknown"] += 1
                self.logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–æ–ø–∏–∫–∞: {json.dumps(data)[:200]}...")
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_kline_data(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ kline (—Å–≤–µ—á–∏) –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ kline –¥–∞–Ω–Ω—ã—Ö...")
            klines = data.get("data", [])
            
            if not klines:
                self.logger.warning("–ü—É—Å—Ç—ã–µ kline –¥–∞–Ω–Ω—ã–µ")
                return
            
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π")
            
            for kline_info in klines:
                kline = {
                    "timestamp": int(kline_info.get("start", 0)),
                    "datetime": datetime.fromtimestamp(int(kline_info.get("start", 0)) / 1000),
                    "open": float(kline_info.get("open", 0)),
                    "high": float(kline_info.get("high", 0)),
                    "low": float(kline_info.get("low", 0)),
                    "close": float(kline_info.get("close", 0)),
                    "volume": float(kline_info.get("volume", 0)),
                    "confirm": kline_info.get("confirm", False)
                }
                
                self.logger.debug(f"Kline: {kline['datetime']}, OHLC: {kline['open']}/{kline['high']}/{kline['low']}/{kline['close']}, confirm: {kline['confirm']}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏
                if kline["confirm"]:
                    self.logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—É—é —Å–≤–µ—á—É: close=${kline['close']}")
                    
                    # –û–±—ã—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    self.kline_data.append(kline)
                    if len(self.kline_data) > self.max_klines:
                        self.kline_data = self.kline_data[-self.max_klines:]
                    
                    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
                    enhanced_kline = self._enhance_kline_data(kline)
                    self.extended_kline_data.append(enhanced_kline)
                    if len(self.extended_kline_data) > self.max_extended_klines:
                        self.extended_kline_data = self.extended_kline_data[-self.max_extended_klines:]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                    self._update_price_levels(kline)
                    
                    self.logger.info(f"–í—Å–µ–≥–æ —Å–≤–µ—á–µ–π –≤ –ø–∞–º—è—Ç–∏: –æ–±—ã—á–Ω—ã—Ö={len(self.kline_data)}, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö={len(self.extended_kline_data)}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                if self.strategy:
                    signal = await self.strategy.analyze_kline(kline)
                    if signal and self.on_signal_callback:
                        await self.on_signal_callback(signal)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline: {e}")
            self.logger.error(f"Kline –¥–∞–Ω–Ω—ã–µ: {data}")
    
    def _enhance_kline_data(self, kline: dict) -> dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞"""
        enhanced = kline.copy()
        
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            open_price = kline["open"]
            high_price = kline["high"]
            low_price = kline["low"]
            close_price = kline["close"]
            volume = kline["volume"]
            
            # –†–∞–∑–º–∞—Ö —Å–≤–µ—á–∏
            enhanced["range"] = high_price - low_price
            enhanced["range_percent"] = (enhanced["range"] / open_price) * 100 if open_price > 0 else 0
            
            # –¢–µ–ª–æ —Å–≤–µ—á–∏
            enhanced["body"] = abs(close_price - open_price)
            enhanced["body_percent"] = (enhanced["body"] / enhanced["range"]) * 100 if enhanced["range"] > 0 else 0
            
            # –¢–µ–Ω–∏
            enhanced["upper_shadow"] = high_price - max(open_price, close_price)
            enhanced["lower_shadow"] = min(open_price, close_price) - low_price
            
            # –¢–∏–ø —Å–≤–µ—á–∏
            enhanced["candle_type"] = "bullish" if close_price > open_price else "bearish" if close_price < open_price else "doji"
            
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
            enhanced["close_position"] = ((close_price - low_price) / enhanced["range"]) * 100 if enhanced["range"] > 0 else 50
            
            # –û–±—ä–µ–º –Ω–∞ —Ü–µ–Ω—É
            enhanced["volume_price_ratio"] = volume / close_price if close_price > 0 else 0
            
            # VWAP –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–≤–µ—á–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            enhanced["vwap_estimate"] = (high_price + low_price + close_price) / 3
            
            return enhanced
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏: {e}")
            return kline
    
    def _update_price_levels(self, kline: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            high_price = kline["high"]
            low_price = kline["low"]
            
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π
            if len(self.extended_kline_data) >= 3:
                recent_highs = [k["high"] for k in self.extended_kline_data[-3:]]
                if high_price == max(recent_highs):
                    self.price_levels["resistance"].append({
                        "price": high_price,
                        "timestamp": kline["timestamp"],
                        "strength": 1
                    })
            
            if len(self.extended_kline_data) >= 3:
                recent_lows = [k["low"] for k in self.extended_kline_data[-3:]]
                if low_price == min(recent_lows):
                    self.price_levels["support"].append({
                        "price": low_price,
                        "timestamp": kline["timestamp"],
                        "strength": 1
                    })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π
            if len(self.price_levels["resistance"]) > 20:
                self.price_levels["resistance"] = self.price_levels["resistance"][-20:]
            if len(self.price_levels["support"]) > 20:
                self.price_levels["support"] = self.price_levels["support"][-20:]
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω: {e}")
    
    async def _handle_orderbook_data(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ orderbook –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ orderbook –¥–∞–Ω–Ω—ã—Ö...")
            orderbook_info = data.get("data", {})
            
            if not orderbook_info:
                self.logger.warning("–ü—É—Å—Ç—ã–µ orderbook –¥–∞–Ω–Ω—ã–µ")
                return
            
            bids = orderbook_info.get("b", [])
            asks = orderbook_info.get("a", [])
            
            self.logger.debug(f"Orderbook: {len(bids)} bids, {len(asks)} asks")
            
            enhanced_orderbook = {
                "symbol": self.symbol,
                "bids": [[float(bid[0]), float(bid[1])] for bid in bids],
                "asks": [[float(ask[0]), float(ask[1])] for ask in asks],
                "timestamp": datetime.now().isoformat()
            }
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞
            enhanced_orderbook.update(self._analyze_orderbook_depth(enhanced_orderbook))
            
            self.orderbook_data = enhanced_orderbook
            
            if enhanced_orderbook.get("best_bid") and enhanced_orderbook.get("best_ask"):
                self.logger.info(f"Orderbook –æ–±–Ω–æ–≤–ª–µ–Ω: bid=${enhanced_orderbook['best_bid']:.4f}, ask=${enhanced_orderbook['best_ask']:.4f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–±—É–∫–∞
            self.extended_orderbook_history.append({
                "timestamp": enhanced_orderbook["timestamp"],
                "spread": enhanced_orderbook.get("spread", 0),
                "bid_volume": enhanced_orderbook.get("total_bid_volume", 0),
                "ask_volume": enhanced_orderbook.get("total_ask_volume", 0),
                "imbalance": enhanced_orderbook.get("order_imbalance", 0)
            })
            
            if len(self.extended_orderbook_history) > self.max_orderbook_history:
                self.extended_orderbook_history = self.extended_orderbook_history[-self.max_orderbook_history:]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ–±—ä–µ–º–∞
            self._update_volume_profile(enhanced_orderbook)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if self.strategy:
                self.strategy.update_orderbook(self.orderbook_data)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ orderbook: {e}")
            self.logger.error(f"Orderbook –¥–∞–Ω–Ω—ã–µ: {data}")
    
    def _analyze_orderbook_depth(self, orderbook: dict) -> dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–ª—É–±–∏–Ω—ã –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        try:
            bids = orderbook.get("bids", [])
            asks = orderbook.get("asks", [])
            
            analysis = {}
            
            if not bids or not asks:
                return analysis
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            best_bid = float(bids[0][0]) if bids else 0
            best_ask = float(asks[0][0]) if asks else 0
            spread = best_ask - best_bid
            
            # –û–±—ä–µ–º—ã
            total_bid_volume = sum(float(bid[1]) for bid in bids)
            total_ask_volume = sum(float(ask[1]) for ask in asks)
            
            # –î–∏—Å–±–∞–ª–∞–Ω—Å –æ—Ä–¥–µ—Ä–æ–≤
            order_imbalance = (total_bid_volume - total_ask_volume) / (total_bid_volume + total_ask_volume) if (total_bid_volume + total_ask_volume) > 0 else 0
            
            analysis.update({
                "spread": spread,
                "spread_percent": (spread / best_bid) * 100 if best_bid > 0 else 0,
                "best_bid": best_bid,
                "best_ask": best_ask,
                "total_bid_volume": total_bid_volume,
                "total_ask_volume": total_ask_volume,
                "order_imbalance": order_imbalance,
                "market_sentiment": "bullish" if order_imbalance > 0.1 else "bearish" if order_imbalance < -0.1 else "neutral"
            })
            
            return analysis
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞: {e}")
            return {}
    
    def _update_volume_profile(self, orderbook: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–∞"""
        try:
            bids = orderbook.get("bids", [])
            asks = orderbook.get("asks", [])
            
            for bid in bids[:10]:
                price = float(bid[0])
                volume = float(bid[1])
                price_level = round(price, 2)
                
                if price_level not in self.volume_profile:
                    self.volume_profile[price_level] = {"bid_volume": 0, "ask_volume": 0, "total_volume": 0}
                
                self.volume_profile[price_level]["bid_volume"] += volume
                self.volume_profile[price_level]["total_volume"] += volume
            
            for ask in asks[:10]:
                price = float(ask[0])
                volume = float(ask[1])
                price_level = round(price, 2)
                
                if price_level not in self.volume_profile:
                    self.volume_profile[price_level] = {"bid_volume": 0, "ask_volume": 0, "total_volume": 0}
                
                self.volume_profile[price_level]["ask_volume"] += volume
                self.volume_profile[price_level]["total_volume"] += volume
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–∞
            if len(self.volume_profile) > 100:
                sorted_levels = sorted(self.volume_profile.items(), key=lambda x: x[1]["total_volume"], reverse=True)
                self.volume_profile = dict(sorted_levels[:100])
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–∞: {e}")
    
    async def _handle_trade_data(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö"""
        try:
            self.logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ trade –¥–∞–Ω–Ω—ã—Ö...")
            trades = data.get("data", [])
            
            if not trades:
                self.logger.warning("–ü—É—Å—Ç—ã–µ trade –¥–∞–Ω–Ω—ã–µ")
                return
            
            self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")
            
            for trade_info in trades:
                trade = {
                    "timestamp": int(trade_info.get("T", 0)),
                    "datetime": datetime.fromtimestamp(int(trade_info.get("T", 0)) / 1000),
                    "price": float(trade_info.get("p", 0)),
                    "size": float(trade_info.get("v", 0)),
                    "side": trade_info.get("S", ""),
                    "trade_id": trade_info.get("i", "")
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                trade["value"] = trade["price"] * trade["size"]
                trade["is_large"] = trade["size"] > self._calculate_average_trade_size() * 2
                
                self.trade_data.append(trade)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
                if len(self.trade_data) > self.max_trades:
                    self.trade_data = self.trade_data[-self.max_trades:]
            
            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫, –≤—Å–µ–≥–æ –≤ –ø–∞–º—è—Ç–∏: {len(self.trade_data)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if self.strategy:
                self.strategy.update_trades(trades)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ trades: {e}")
            self.logger.error(f"Trade –¥–∞–Ω–Ω—ã–µ: {data}")
    
    def _calculate_average_trade_size(self) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏"""
        if not self.trade_data:
            return 0
        
        recent_trades = self.trade_data[-50:]
        total_size = sum(trade["size"] for trade in recent_trades)
        return total_size / len(recent_trades)
    
    async def _ping_loop(self):
        """–¶–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ ping —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç –∫–ª–∏–µ–Ω—Ç–∞)"""
        while self.is_connected:
            try:
                await asyncio.sleep(20)  # –ö–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥ –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç Bybit
                
                if self.websocket and not self.websocket.closed:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                    client_ping = {
                        "op": "ping", 
                        "args": [str(int(time.time() * 1000))]
                    }
                    await self.websocket.send(json.dumps(client_ping))
                    self.last_ping = time.time()
                    self.logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω client ping: {client_ping['args'][0]}")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ ping: {e}")
                break
    
    def get_market_data(self, symbol: str = None) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–∞–∑–æ–≤—ã–µ)"""
        if symbol and symbol != self.symbol:
            return {}
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ ticker_data –ø—É—Å—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not self.ticker_data and self.kline_data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–µ—á—É –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            last_kline = self.kline_data[-1]
            current_price = last_kline.get("close", 0)
            
            return {
                "symbol": self.symbol,
                "price": f"{current_price:.4f}",
                "change_24h": "N/A",
                "volume_24h": "N/A", 
                "high_24h": f"{last_kline.get('high', 0):.4f}",
                "low_24h": f"{last_kline.get('low', 0):.4f}",
                "bid": f"{current_price:.4f}",
                "ask": f"{current_price + 1:.4f}",
                "spread": "1.0000",
                "timestamp": datetime.now().isoformat(),
                "trend": "unknown",
                "klines_count": len(self.kline_data),
                "trades_count": len(self.trade_data),
                "data_source": "klines_fallback"
            }
        
        if not self.ticker_data:
            self.logger.warning("ticker_data –ø—É—Å—Ç –∏ –Ω–µ—Ç klines –¥–∞–Ω–Ω—ã—Ö")
            return {}
        
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º...
        change_24h = self.ticker_data.get("change_24h", 0)
        if change_24h > 2:
            trend = "bullish"
        elif change_24h < -2:
            trend = "bearish"
        else:
            trend = "sideways"
        
        return {
            "symbol": self.ticker_data.get("symbol", self.symbol),
            "price": f"{self.ticker_data.get('price', 0):.4f}",
            "change_24h": f"{change_24h:+.2f}%",
            "volume_24h": f"{self.ticker_data.get('volume_24h', 0):,.0f}",
            "high_24h": f"{self.ticker_data.get('high_24h', 0):.4f}",
            "low_24h": f"{self.ticker_data.get('low_24h', 0):.4f}",
            "bid": f"{self.ticker_data.get('bid', 0):.4f}",
            "ask": f"{self.ticker_data.get('ask', 0):.4f}",
            "spread": f"{abs(self.ticker_data.get('ask', 0) - self.ticker_data.get('bid', 0)):.4f}",
            "timestamp": self.ticker_data.get("timestamp"),
            "trend": trend,
            "klines_count": len(self.kline_data),
            "trades_count": len(self.trade_data),
            "data_source": "ticker"
        }
    
    async def get_comprehensive_market_data(self, symbol: str = None) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —Å HTTP ticker"""
        if symbol and symbol != self.symbol:
            self.logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω —Å–∏–º–≤–æ–ª {symbol}, –Ω–æ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {self.symbol}")
            return {}
        
        try:
            self.logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä comprehensive market data —Å HTTP ticker...")
            
            # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ ticker –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ HTTP
            fresh_ticker = await self.get_fresh_ticker_data()
            
            if not fresh_ticker:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ ticker –¥–∞–Ω–Ω—ã–µ")
                return {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WebSocket –¥–∞–Ω–Ω—ã—Ö
            if not self.kline_data:
                self.logger.warning("kline_data –ø—É—Å—Ç")
            else:
                self.logger.info(f"kline_data: {len(self.kline_data)} –æ–±—ã—á–Ω—ã—Ö —Å–≤–µ—á–µ–π")
            
            if not self.extended_kline_data:
                self.logger.warning("extended_kline_data –ø—É—Å—Ç")
            else:
                self.logger.info(f"extended_kline_data: {len(self.extended_kline_data)} —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            comprehensive_data = {
                "basic_market": self._get_basic_market_summary_from_http(fresh_ticker),
                "technical_indicators": self._get_technical_indicators_data(),
                "extended_klines": self._get_extended_klines_summary(),
                "orderbook_analysis": self._get_orderbook_analysis(),
                "trading_activity": self._get_trading_activity_analysis(),
                "price_levels": self._get_price_levels_analysis(),
                "volume_profile": self._get_volume_profile_analysis(),
                "market_microstructure": self._get_microstructure_analysis(),
                "metadata": {
                    "timestamp": datetime.now().isoformat(),
                    "symbol": symbol or self.symbol,
                    "data_quality": self._assess_data_quality(),
                    "collection_period": self._get_collection_period(),
                    "data_sources": {
                        "ticker": "HTTP REST API",
                        "klines": "WebSocket",
                        "orderbook": "WebSocket", 
                        "trades": "WebSocket"
                    }
                }
            }
            
            self.logger.info(f"‚úÖ Comprehensive data —Å–æ–±—Ä–∞–Ω—ã: {len(comprehensive_data)} —Å–µ–∫—Ü–∏–π")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –≤ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
            for section, data in comprehensive_data.items():
                if isinstance(data, dict):
                    self.logger.debug(f"  {section}: {len(data)} –ø–æ–ª–µ–π")
                else:
                    self.logger.debug(f"  {section}: {type(data)}")
            
            return comprehensive_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ø–æ–ª–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def _get_basic_market_summary_from_http(self, http_ticker: dict) -> dict:
        """–û—Å–Ω–æ–≤–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ HTTP ticker"""
        if not http_ticker:
            self.logger.warning("HTTP ticker –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã")
            return {}
        
        try:
            summary = {
                "symbol": http_ticker.get("symbol", self.symbol),
                "current_price": float(http_ticker.get("lastPrice", 0)),
                "change_24h_percent": float(http_ticker.get("price24hPcnt", 0)) * 100,
                "volume_24h": float(http_ticker.get("volume24h", 0)),
                "high_24h": float(http_ticker.get("highPrice24h", 0)),
                "low_24h": float(http_ticker.get("lowPrice24h", 0)),
                "best_bid": float(http_ticker.get("bid1Price", 0)),
                "best_ask": float(http_ticker.get("ask1Price", 0)),
                "mark_price": float(http_ticker.get("markPrice", 0)),
                "index_price": float(http_ticker.get("indexPrice", 0)),
                "funding_rate": float(http_ticker.get("fundingRate", 0)),
                "open_interest": float(http_ticker.get("openInterest", 0)),
                "turnover_24h": float(http_ticker.get("turnover24h", 0))
            }
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø—Ä–µ–¥
            if summary["best_bid"] > 0 and summary["best_ask"] > 0:
                summary["spread"] = summary["best_ask"] - summary["best_bid"]
                summary["spread_percent"] = (summary["spread"] / summary["best_bid"]) * 100
            else:
                summary["spread"] = 0
                summary["spread_percent"] = 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ticker_data –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            self.ticker_data = {
                "symbol": summary["symbol"],
                "price": summary["current_price"],
                "change_24h": summary["change_24h_percent"],
                "volume_24h": summary["volume_24h"],
                "high_24h": summary["high_24h"],
                "low_24h": summary["low_24h"],
                "bid": summary["best_bid"],
                "ask": summary["best_ask"],
                "timestamp": datetime.now().isoformat()
            }
            
            self.logger.info(f"‚úÖ HTTP ticker –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {summary['symbol']} @ ${summary['current_price']:.2f}")
            return summary
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP ticker: {e}")
            return {}
    
    def _get_technical_indicators_data(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            if self.strategy and hasattr(self.strategy, 'current_indicators'):
                return self.strategy.current_indicators
            return {}
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {}
    
    # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –º–µ—Ç–æ–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (–æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ)
    
    def _get_extended_klines_summary(self) -> dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Å–≤–µ—á–∞–º"""
        if not self.extended_kline_data:
            return {}
        
        try:
            recent_klines = self.extended_kline_data[-20:]
            closes = [k["close"] for k in recent_klines]
            volumes = [k["volume"] for k in recent_klines]
            
            return {
                "total_klines": len(self.extended_kline_data),
                "analyzed_period": len(recent_klines),
                "price_statistics": {
                    "current_price": closes[-1] if closes else 0,
                    "avg_price": sum(closes) / len(closes) if closes else 0,
                    "price_volatility": self._calculate_volatility(closes)
                },
                "volume_statistics": {
                    "avg_volume": sum(volumes) / len(volumes) if volumes else 0,
                    "volume_trend": self._determine_volume_trend(volumes)
                },
                "raw_klines": recent_klines[-10:]
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–µ—á–µ–π: {e}")
            return {}
    
    def _get_orderbook_analysis(self) -> dict:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        if not self.orderbook_data:
            return {}
        
        return {
            "current_orderbook": self.orderbook_data,
            "top_levels": {
                "bids": self.orderbook_data.get("bids", [])[:5],
                "asks": self.orderbook_data.get("asks", [])[:5]
            }
        }
    
    def _get_trading_activity_analysis(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if not self.trade_data:
            return {}
        
        try:
            recent_trades = self.trade_data[-50:]
            buy_trades = [t for t in recent_trades if t["side"].upper() == "BUY"]
            sell_trades = [t for t in recent_trades if t["side"].upper() == "SELL"]
            
            return {
                "total_trades": len(recent_trades),
                "buy_sell_ratio": {
                    "trades": len(buy_trades) / len(sell_trades) if sell_trades else 0,
                    "volume": sum(t["size"] for t in buy_trades) / sum(t["size"] for t in sell_trades) if sell_trades else 0
                },
                "recent_trades_sample": recent_trades[-5:]
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return {}
    
    def _get_price_levels_analysis(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        return {
            "support_levels": self.price_levels["support"][-5:],
            "resistance_levels": self.price_levels["resistance"][-5:]
        }
    
    def _get_volume_profile_analysis(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–∞"""
        if not self.volume_profile:
            return {}
        
        sorted_levels = sorted(self.volume_profile.items(), key=lambda x: x[1]["total_volume"], reverse=True)
        
        return {
            "high_volume_nodes": [{"price": float(price), "volume": data["total_volume"]} for price, data in sorted_levels[:5]]
        }
    
    def _get_microstructure_analysis(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞"""
        return {
            "liquidity_metrics": self._calculate_liquidity_metrics(),
            "order_flow_metrics": self._calculate_order_flow_metrics()
        }
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def _calculate_volatility(self, prices: List[float]) -> float:
        """–†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if len(prices) < 2:
            return 0
        
        mean_price = sum(prices) / len(prices)
        variance = sum((price - mean_price) ** 2 for price in prices) / len(prices)
        return math.sqrt(variance) / mean_price * 100
    
    def _determine_volume_trend(self, volumes: List[float]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –æ–±—ä–µ–º–∞"""
        if len(volumes) < 2:
            return "neutral"
        
        recent_avg = sum(volumes[-5:]) / len(volumes[-5:])
        earlier_avg = sum(volumes[-10:-5]) / len(volumes[-10:-5]) if len(volumes) >= 10 else volumes[0]
        
        if recent_avg > earlier_avg * 1.1:
            return "increasing"
        elif recent_avg < earlier_avg * 0.9:
            return "decreasing"
        else:
            return "stable"
    
    def _calculate_liquidity_metrics(self) -> dict:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        if not self.orderbook_data:
            return {}
        
        spread = self.orderbook_data.get("spread", 0)
        best_bid = self.orderbook_data.get("best_bid", 0)
        total_bid_volume = self.orderbook_data.get("total_bid_volume", 0)
        total_ask_volume = self.orderbook_data.get("total_ask_volume", 0)
        
        return {
            "bid_ask_spread": spread,
            "spread_percentage": (spread / best_bid) * 100 if best_bid > 0 else 0,
            "total_liquidity": total_bid_volume + total_ask_volume
        }
    
    def _calculate_order_flow_metrics(self) -> dict:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø–æ—Ç–æ–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
        if not self.trade_data:
            return {}
        
        recent_trades = self.trade_data[-30:]
        buy_trades = [t for t in recent_trades if t["side"].upper() == "BUY"]
        sell_trades = [t for t in recent_trades if t["side"].upper() == "SELL"]
        
        buy_volume = sum(t["size"] for t in buy_trades)
        sell_volume = sum(t["size"] for t in sell_trades)
        
        return {
            "buy_sell_ratio": buy_volume / sell_volume if sell_volume > 0 else 0,
            "order_flow_imbalance": (buy_volume - sell_volume) / (buy_volume + sell_volume) if (buy_volume + sell_volume) > 0 else 0,
            "average_trade_size": sum(t["size"] for t in recent_trades) / len(recent_trades) if recent_trades else 0
        }
    
    def _assess_data_quality(self) -> dict:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        return {
            "websocket_connected": self.is_connected,
            "data_freshness": time.time() - self.last_data_time,
            "klines_available": len(self.extended_kline_data),
            "orderbook_available": bool(self.orderbook_data),
            "trades_available": len(self.trade_data),
            "ticker_source": "HTTP REST API"
        }
    
    def _get_collection_period(self) -> dict:
        """–ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.extended_kline_data:
            return {}
        
        first_kline = self.extended_kline_data[0]
        last_kline = self.extended_kline_data[-1]
        
        return {
            "start_time": first_kline["datetime"].isoformat(),
            "end_time": last_kline["datetime"].isoformat(),
            "duration_minutes": (last_kline["datetime"] - first_kline["datetime"]).total_seconds() / 60,
            "timeframe": self.settings.STRATEGY_TIMEFRAME
        }
    
    def get_connection_status(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return {
            "is_connected": self.is_connected,
            "websocket_active": self.websocket is not None and not self.websocket.closed if self.websocket else False,
            "last_data_time": self.last_data_time,
            "reconnect_count": self.reconnect_count,
            "message_counts": self.message_counts.copy()
        }
