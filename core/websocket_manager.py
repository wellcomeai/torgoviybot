"""
WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit
–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
–û–±–Ω–æ–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ get_comprehensive_market_data() –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
"""

import asyncio
import json
import logging
import time
import math
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable, Any
import websockets
from websockets.exceptions import ConnectionClosed, WebSocketException

from config.settings import get_settings


class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit"""
    
    def __init__(self, symbol: str, strategy, on_signal_callback: Optional[Callable] = None):
        self.settings = get_settings()
        self.symbol = symbol
        self.strategy = strategy
        self.on_signal_callback = on_signal_callback
        
        self.websocket = None
        self.is_connected = False
        self.reconnect_count = 0
        self.last_ping = 0
        self.last_data_time = time.time()
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.ticker_data = {}
        self.kline_data = []
        self.orderbook_data = {}
        self.trade_data = []
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
        self.extended_kline_data = []  # –ë–æ–ª—å—à–µ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.extended_orderbook_history = []  # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–±—É–∫–∞
        self.volume_profile = {}  # –ü—Ä–æ—Ñ–∏–ª—å –æ–±—ä–µ–º–∞
        self.price_levels = {"support": [], "resistance": []}  # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        
        # –ó–∞–¥–∞—á–∏ asyncio
        self.ping_task = None
        self.reconnect_task = None
        self.main_task = None
        
        # –õ–∏–º–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        self.max_klines = self.settings.KLINE_LIMIT
        self.max_trades = 1000
        self.max_extended_klines = self.settings.AI_KLINES_COUNT  # –î–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
        self.max_orderbook_history = 50  # –ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞
        
        self.logger = logging.getLogger(__name__)
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            self.logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit WebSocket...")
            self.logger.info(f"   URL: {self.settings.websocket_url}")
            self.logger.info(f"   –°–∏–º–≤–æ–ª: {self.symbol}")
            self.logger.info(f"   –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò: –≤–∫–ª—é—á–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
            self.main_task = asyncio.create_task(self._main_loop())
            
            # –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for _ in range(10):  # 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                if self.is_connected:
                    break
                await asyncio.sleep(1)
            
            if not self.is_connected:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥")
            
            self.logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            
            self.is_connected = False
            
            # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
            if self.main_task and not self.main_task.done():
                self.main_task.cancel()
            
            if self.ping_task and not self.ping_task.done():
                self.ping_task.cancel()
            
            if self.reconnect_task and not self.reconnect_task.done():
                self.reconnect_task.cancel()
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if self.websocket:
                await self.websocket.close()
                
            self.logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: {e}")
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while True:
            try:
                await self._connect_and_subscribe()
                await self._listen_messages()
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ WebSocket: {e}")
                self.is_connected = False
                
                if self.reconnect_count < self.settings.WS_RECONNECT_ATTEMPTS:
                    self.reconnect_count += 1
                    delay = self.settings.WS_RECONNECT_DELAY * self.reconnect_count
                    self.logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {self.reconnect_count})")
                    await asyncio.sleep(delay)
                else:
                    self.logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    break
    
    async def _connect_and_subscribe(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
            self.websocket = await websockets.connect(
                self.settings.websocket_url,
                ping_interval=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ping
                ping_timeout=None,
                close_timeout=10
            )
            
            self.logger.info("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞)
            subscriptions = [
                self.settings.get_ticker_subscription(),
                self.settings.get_kline_subscription(),
                self.settings.get_orderbook_subscription(),
                f"publicTrade.{self.symbol}"
            ]
            
            subscribe_message = {
                "op": "subscribe",
                "args": subscriptions
            }
            
            await self.websocket.send(json.dumps(subscribe_message))
            self.logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–µ: {subscriptions}")
            
            # –ó–∞–ø—É—Å–∫ ping –∑–∞–¥–∞—á–∏
            if self.ping_task and not self.ping_task.done():
                self.ping_task.cancel()
            
            self.ping_task = asyncio.create_task(self._ping_loop())
            
            self.is_connected = True
            self.reconnect_count = 0
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            raise
    
    async def _listen_messages(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket"""
        async for message in self.websocket:
            try:
                data = json.loads(message)
                await self._handle_message(data)
                self.last_data_time = time.time()
                
            except json.JSONDecodeError as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_message(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            if data.get("success") and data.get("op") == "subscribe":
                self.logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {data.get('ret_msg', 'OK')}")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ pong –æ—Ç–≤–µ—Ç–æ–≤
            if data.get("op") == "ping":
                pong_message = {"op": "pong", "args": data.get("args", [])}
                await self.websocket.send(json.dumps(pong_message))
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            topic = data.get("topic", "")
            
            if not topic:
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ticker –¥–∞–Ω–Ω—ã—Ö
            if topic.startswith("tickers."):
                await self._handle_ticker_data(data)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ kline –¥–∞–Ω–Ω—ã—Ö
            elif topic.startswith("kline."):
                await self._handle_kline_data(data)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ orderbook –¥–∞–Ω–Ω—ã—Ö
            elif topic.startswith("orderbook."):
                await self._handle_orderbook_data(data)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ trade –¥–∞–Ω–Ω—ã—Ö
            elif topic.startswith("publicTrade."):
                await self._handle_trade_data(data)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_ticker_data(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ ticker –¥–∞–Ω–Ω—ã—Ö"""
        try:
            ticker_info = data.get("data", {})
            
            if not ticker_info:
                return
            
            self.ticker_data = {
                "symbol": ticker_info.get("symbol"),
                "price": float(ticker_info.get("lastPrice", 0)),
                "change_24h": float(ticker_info.get("price24hPcnt", 0)) * 100,
                "volume_24h": float(ticker_info.get("volume24h", 0)),
                "high_24h": float(ticker_info.get("highPrice24h", 0)),
                "low_24h": float(ticker_info.get("lowPrice24h", 0)),
                "bid": float(ticker_info.get("bid1Price", 0)),
                "ask": float(ticker_info.get("ask1Price", 0)),
                "timestamp": datetime.now().isoformat()
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if self.strategy:
                self.strategy.update_ticker(self.ticker_data)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ticker: {e}")
    
    async def _handle_kline_data(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ kline (—Å–≤–µ—á–∏) –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Å–±–æ—Ä–æ–º"""
        try:
            klines = data.get("data", [])
            
            for kline_info in klines:
                kline = {
                    "timestamp": int(kline_info.get("start", 0)),
                    "datetime": datetime.fromtimestamp(int(kline_info.get("start", 0)) / 1000),
                    "open": float(kline_info.get("open", 0)),
                    "high": float(kline_info.get("high", 0)),
                    "low": float(kline_info.get("low", 0)),
                    "close": float(kline_info.get("close", 0)),
                    "volume": float(kline_info.get("volume", 0)),
                    "confirm": kline_info.get("confirm", False)
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏
                if kline["confirm"]:
                    # –û–±—ã—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    self.kline_data.append(kline)
                    if len(self.kline_data) > self.max_klines:
                        self.kline_data = self.kline_data[-self.max_klines:]
                    
                    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
                    enhanced_kline = self._enhance_kline_data(kline)
                    self.extended_kline_data.append(enhanced_kline)
                    if len(self.extended_kline_data) > self.max_extended_klines:
                        self.extended_kline_data = self.extended_kline_data[-self.max_extended_klines:]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                    self._update_price_levels(kline)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                if self.strategy:
                    signal = await self.strategy.analyze_kline(kline)
                    if signal and self.on_signal_callback:
                        await self.on_signal_callback(signal)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline: {e}")
    
    def _enhance_kline_data(self, kline: dict) -> dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞"""
        enhanced = kline.copy()
        
        try:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            open_price = kline["open"]
            high_price = kline["high"]
            low_price = kline["low"]
            close_price = kline["close"]
            volume = kline["volume"]
            
            # –†–∞–∑–º–∞—Ö —Å–≤–µ—á–∏
            enhanced["range"] = high_price - low_price
            enhanced["range_percent"] = (enhanced["range"] / open_price) * 100 if open_price > 0 else 0
            
            # –¢–µ–ª–æ —Å–≤–µ—á–∏
            enhanced["body"] = abs(close_price - open_price)
            enhanced["body_percent"] = (enhanced["body"] / enhanced["range"]) * 100 if enhanced["range"] > 0 else 0
            
            # –¢–µ–Ω–∏
            enhanced["upper_shadow"] = high_price - max(open_price, close_price)
            enhanced["lower_shadow"] = min(open_price, close_price) - low_price
            
            # –¢–∏–ø —Å–≤–µ—á–∏
            enhanced["candle_type"] = "bullish" if close_price > open_price else "bearish" if close_price < open_price else "doji"
            
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
            enhanced["close_position"] = ((close_price - low_price) / enhanced["range"]) * 100 if enhanced["range"] > 0 else 50
            
            # –û–±—ä–µ–º –Ω–∞ —Ü–µ–Ω—É
            enhanced["volume_price_ratio"] = volume / close_price if close_price > 0 else 0
            
            # VWAP –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–≤–µ—á–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            enhanced["vwap_estimate"] = (high_price + low_price + close_price) / 3
            
            return enhanced
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏: {e}")
            return kline
    
    def _update_price_levels(self, kline: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            high_price = kline["high"]
            low_price = kline["low"]
            
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
            # –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ - –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã
            if len(self.extended_kline_data) >= 3:
                recent_highs = [k["high"] for k in self.extended_kline_data[-3:]]
                if high_price == max(recent_highs):
                    self.price_levels["resistance"].append({
                        "price": high_price,
                        "timestamp": kline["timestamp"],
                        "strength": 1
                    })
            
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã
            if len(self.extended_kline_data) >= 3:
                recent_lows = [k["low"] for k in self.extended_kline_data[-3:]]
                if low_price == min(recent_lows):
                    self.price_levels["support"].append({
                        "price": low_price,
                        "timestamp": kline["timestamp"],
                        "strength": 1
                    })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π
            if len(self.price_levels["resistance"]) > 20:
                self.price_levels["resistance"] = self.price_levels["resistance"][-20:]
            if len(self.price_levels["support"]) > 20:
                self.price_levels["support"] = self.price_levels["support"][-20:]
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π —Ü–µ–Ω: {e}")
    
    async def _handle_orderbook_data(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ orderbook –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            orderbook_info = data.get("data", {})
            
            enhanced_orderbook = {
                "symbol": self.symbol,
                "bids": [[float(bid[0]), float(bid[1])] for bid in orderbook_info.get("b", [])],
                "asks": [[float(ask[0]), float(ask[1])] for ask in orderbook_info.get("a", [])],
                "timestamp": datetime.now().isoformat()
            }
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞
            enhanced_orderbook.update(self._analyze_orderbook_depth(enhanced_orderbook))
            
            self.orderbook_data = enhanced_orderbook
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ä–¥–µ—Ä–±—É–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            self.extended_orderbook_history.append({
                "timestamp": enhanced_orderbook["timestamp"],
                "spread": enhanced_orderbook.get("spread", 0),
                "bid_volume": enhanced_orderbook.get("total_bid_volume", 0),
                "ask_volume": enhanced_orderbook.get("total_ask_volume", 0),
                "imbalance": enhanced_orderbook.get("order_imbalance", 0)
            })
            
            if len(self.extended_orderbook_history) > self.max_orderbook_history:
                self.extended_orderbook_history = self.extended_orderbook_history[-self.max_orderbook_history:]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ–±—ä–µ–º–∞
            self._update_volume_profile(enhanced_orderbook)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if self.strategy:
                self.strategy.update_orderbook(self.orderbook_data)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ orderbook: {e}")
    
    def _analyze_orderbook_depth(self, orderbook: dict) -> dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–ª—É–±–∏–Ω—ã –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        try:
            bids = orderbook.get("bids", [])
            asks = orderbook.get("asks", [])
            
            analysis = {}
            
            if not bids or not asks:
                return analysis
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            best_bid = float(bids[0][0]) if bids else 0
            best_ask = float(asks[0][0]) if asks else 0
            spread = best_ask - best_bid
            
            # –û–±—ä–µ–º—ã
            total_bid_volume = sum(float(bid[1]) for bid in bids)
            total_ask_volume = sum(float(ask[1]) for ask in asks)
            
            # –î–∏—Å–±–∞–ª–∞–Ω—Å –æ—Ä–¥–µ—Ä–æ–≤
            order_imbalance = (total_bid_volume - total_ask_volume) / (total_bid_volume + total_ask_volume) if (total_bid_volume + total_ask_volume) > 0 else 0
            
            # –ì–ª—É–±–∏–Ω–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
            levels_analysis = {}
            for depth in [5, 10, 20]:
                if len(bids) >= depth and len(asks) >= depth:
                    bid_volume = sum(float(bid[1]) for bid in bids[:depth])
                    ask_volume = sum(float(ask[1]) for ask in asks[:depth])
                    levels_analysis[f"depth_{depth}"] = {
                        "bid_volume": bid_volume,
                        "ask_volume": ask_volume,
                        "ratio": bid_volume / ask_volume if ask_volume > 0 else 0
                    }
            
            # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
            avg_bid_size = total_bid_volume / len(bids) if bids else 0
            avg_ask_size = total_ask_volume / len(asks) if asks else 0
            
            # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ (—Ç–æ–ø 10% –æ—Ä–¥–µ—Ä–æ–≤)
            top_bid_count = max(1, len(bids) // 10)
            top_ask_count = max(1, len(asks) // 10)
            
            top_bid_volume = sum(float(bid[1]) for bid in sorted(bids, key=lambda x: float(x[1]), reverse=True)[:top_bid_count])
            top_ask_volume = sum(float(ask[1]) for ask in sorted(asks, key=lambda x: float(x[1]), reverse=True)[:top_ask_count])
            
            concentration_bid = (top_bid_volume / total_bid_volume) * 100 if total_bid_volume > 0 else 0
            concentration_ask = (top_ask_volume / total_ask_volume) * 100 if total_ask_volume > 0 else 0
            
            analysis.update({
                "spread": spread,
                "spread_percent": (spread / best_bid) * 100 if best_bid > 0 else 0,
                "best_bid": best_bid,
                "best_ask": best_ask,
                "total_bid_volume": total_bid_volume,
                "total_ask_volume": total_ask_volume,
                "order_imbalance": order_imbalance,
                "bid_ask_ratio": total_bid_volume / total_ask_volume if total_ask_volume > 0 else 0,
                "avg_bid_size": avg_bid_size,
                "avg_ask_size": avg_ask_size,
                "liquidity_concentration": {
                    "bid_percent": concentration_bid,
                    "ask_percent": concentration_ask
                },
                "levels_analysis": levels_analysis,
                "market_sentiment": "bullish" if order_imbalance > 0.1 else "bearish" if order_imbalance < -0.1 else "neutral"
            })
            
            return analysis
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞: {e}")
            return {}
    
    def _update_volume_profile(self, orderbook: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–∞"""
        try:
            bids = orderbook.get("bids", [])
            asks = orderbook.get("asks", [])
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–∞
            for bid in bids[:10]:  # –¢–æ–ø 10 bid'–æ–≤
                price = float(bid[0])
                volume = float(bid[1])
                price_level = round(price, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                
                if price_level not in self.volume_profile:
                    self.volume_profile[price_level] = {"bid_volume": 0, "ask_volume": 0, "total_volume": 0}
                
                self.volume_profile[price_level]["bid_volume"] += volume
                self.volume_profile[price_level]["total_volume"] += volume
            
            for ask in asks[:10]:  # –¢–æ–ø 10 ask'–æ–≤
                price = float(ask[0])
                volume = float(ask[1])
                price_level = round(price, 2)
                
                if price_level not in self.volume_profile:
                    self.volume_profile[price_level] = {"bid_volume": 0, "ask_volume": 0, "total_volume": 0}
                
                self.volume_profile[price_level]["ask_volume"] += volume
                self.volume_profile[price_level]["total_volume"] += volume
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–∞
            if len(self.volume_profile) > 100:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
                sorted_levels = sorted(self.volume_profile.items(), key=lambda x: x[1]["total_volume"], reverse=True)
                self.volume_profile = dict(sorted_levels[:100])
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–∞: {e}")
    
    async def _handle_trade_data(self, data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        try:
            trades = data.get("data", [])
            
            for trade_info in trades:
                trade = {
                    "timestamp": int(trade_info.get("T", 0)),
                    "datetime": datetime.fromtimestamp(int(trade_info.get("T", 0)) / 1000),
                    "price": float(trade_info.get("p", 0)),
                    "size": float(trade_info.get("v", 0)),
                    "side": trade_info.get("S", ""),
                    "trade_id": trade_info.get("i", "")
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                trade["value"] = trade["price"] * trade["size"]
                trade["is_large"] = trade["size"] > self._calculate_average_trade_size() * 2
                
                self.trade_data.append(trade)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
                if len(self.trade_data) > self.max_trades:
                    self.trade_data = self.trade_data[-self.max_trades:]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if self.strategy:
                self.strategy.update_trades(trades)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ trades: {e}")
    
    def _calculate_average_trade_size(self) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–¥–µ–ª–∫–∏"""
        if not self.trade_data:
            return 0
        
        recent_trades = self.trade_data[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–¥–µ–ª–æ–∫
        total_size = sum(trade["size"] for trade in recent_trades)
        return total_size / len(recent_trades)
    
    async def _ping_loop(self):
        """–¶–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ ping —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while self.is_connected:
            try:
                await asyncio.sleep(self.settings.WS_PING_INTERVAL)
                
                if self.websocket and not self.websocket.closed:
                    ping_message = {
                        "op": "ping",
                        "args": [str(int(time.time() * 1000))]
                    }
                    await self.websocket.send(json.dumps(ping_message))
                    self.last_ping = time.time()
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ ping: {e}")
                break
    
    def get_market_data(self, symbol: str = None) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–∞–∑–æ–≤—ã–µ)"""
        if symbol and symbol != self.symbol:
            return {}
        
        if not self.ticker_data:
            return {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ 24—á
        change_24h = self.ticker_data.get("change_24h", 0)
        if change_24h > 2:
            trend = "bullish"
        elif change_24h < -2:
            trend = "bearish"
        else:
            trend = "sideways"
        
        return {
            "symbol": self.ticker_data.get("symbol", self.symbol),
            "price": f"{self.ticker_data.get('price', 0):.4f}",
            "change_24h": f"{change_24h:+.2f}%",
            "volume_24h": f"{self.ticker_data.get('volume_24h', 0):,.0f}",
            "high_24h": f"{self.ticker_data.get('high_24h', 0):.4f}",
            "low_24h": f"{self.ticker_data.get('low_24h', 0):.4f}",
            "bid": f"{self.ticker_data.get('bid', 0):.4f}",
            "ask": f"{self.ticker_data.get('ask', 0):.4f}",
            "spread": f"{abs(self.ticker_data.get('ask', 0) - self.ticker_data.get('bid', 0)):.4f}",
            "timestamp": self.ticker_data.get("timestamp"),
            "trend": trend,
            "klines_count": len(self.kline_data),
            "trades_count": len(self.trade_data)
        }
    
    def get_comprehensive_market_data(self, symbol: str = None) -> dict:
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å –í–°–ï —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
        """
        if symbol and symbol != self.symbol:
            return {}
        
        try:
            comprehensive_data = {
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                "basic_market": self._get_basic_market_summary(),
                
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
                "extended_klines": self._get_extended_klines_summary(),
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞
                "orderbook_analysis": self._get_orderbook_analysis(),
                
                # –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                "trading_activity": self._get_trading_activity_analysis(),
                
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π
                "price_levels": self._get_price_levels_analysis(),
                
                # –ü—Ä–æ—Ñ–∏–ª—å –æ–±—ä–µ–º–∞
                "volume_profile": self._get_volume_profile_analysis(),
                
                # –†—ã–Ω–æ—á–Ω–∞—è –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                "market_microstructure": self._get_microstructure_analysis(),
                
                # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
                "metadata": {
                    "timestamp": datetime.now().isoformat(),
                    "symbol": symbol or self.symbol,
                    "data_quality": self._assess_data_quality(),
                    "collection_period": self._get_collection_period()
                }
            }
            
            return comprehensive_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ø–æ–ª–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def _get_basic_market_summary(self) -> dict:
        """–û—Å–Ω–æ–≤–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        if not self.ticker_data:
            return {}
        
        return {
            "symbol": self.ticker_data.get("symbol", self.symbol),
            "current_price": self.ticker_data.get("price", 0),
            "change_24h_percent": self.ticker_data.get("change_24h", 0),
            "volume_24h": self.ticker_data.get("volume_24h", 0),
            "high_24h": self.ticker_data.get("high_24h", 0),
            "low_24h": self.ticker_data.get("low_24h", 0),
            "best_bid": self.ticker_data.get("bid", 0),
            "best_ask": self.ticker_data.get("ask", 0),
            "spread": abs(self.ticker_data.get("ask", 0) - self.ticker_data.get("bid", 0)),
            "spread_percent": (abs(self.ticker_data.get("ask", 0) - self.ticker_data.get("bid", 0)) / self.ticker_data.get("bid", 1)) * 100
        }
    
    def _get_extended_klines_summary(self) -> dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Å–≤–µ—á–∞–º"""
        if not self.extended_kline_data:
            return {}
        
        try:
            recent_klines = self.extended_kline_data[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–≤–µ—á–µ–π
            
            # –¶–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            closes = [k["close"] for k in recent_klines]
            highs = [k["high"] for k in recent_klines]
            lows = [k["low"] for k in recent_klines]
            volumes = [k["volume"] for k in recent_klines]
            ranges = [k.get("range", 0) for k in recent_klines]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω
            price_stats = {
                "current_price": closes[-1] if closes else 0,
                "avg_price": sum(closes) / len(closes) if closes else 0,
                "max_price": max(highs) if highs else 0,
                "min_price": min(lows) if lows else 0,
                "price_volatility": self._calculate_volatility(closes),
                "price_trend": self._determine_price_trend(closes)
            }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–º–æ–≤
            volume_stats = {
                "avg_volume": sum(volumes) / len(volumes) if volumes else 0,
                "max_volume": max(volumes) if volumes else 0,
                "min_volume": min(volumes) if volumes else 0,
                "volume_trend": self._determine_volume_trend(volumes),
                "volume_price_correlation": self._calculate_volume_price_correlation(closes, volumes)
            }
            
            # –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–µ–π
            candle_analysis = {
                "bullish_candles": len([k for k in recent_klines if k.get("candle_type") == "bullish"]),
                "bearish_candles": len([k for k in recent_klines if k.get("candle_type") == "bearish"]),
                "doji_candles": len([k for k in recent_klines if k.get("candle_type") == "doji"]),
                "avg_body_percent": sum(k.get("body_percent", 0) for k in recent_klines) / len(recent_klines),
                "avg_range": sum(ranges) / len(ranges) if ranges else 0,
                "high_volatility_periods": len([r for r in ranges if r > sum(ranges) / len(ranges) * 1.5])
            }
            
            return {
                "total_klines": len(self.extended_kline_data),
                "analyzed_period": len(recent_klines),
                "price_statistics": price_stats,
                "volume_statistics": volume_stats,
                "candle_analysis": candle_analysis,
                "raw_klines": recent_klines[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–µ—á–µ–π: {e}")
            return {}
    
    def _get_orderbook_analysis(self) -> dict:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        if not self.orderbook_data:
            return {}
        
        try:
            orderbook = self.orderbook_data.copy()
            
            # –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ä–¥–µ—Ä–±—É–∫–∞
            history_analysis = {}
            if len(self.extended_orderbook_history) > 1:
                recent_history = self.extended_orderbook_history[-10:]
                spreads = [h["spread"] for h in recent_history]
                imbalances = [h["imbalance"] for h in recent_history]
                
                history_analysis = {
                    "avg_spread": sum(spreads) / len(spreads),
                    "spread_volatility": self._calculate_volatility(spreads),
                    "avg_imbalance": sum(imbalances) / len(imbalances),
                    "imbalance_trend": "increasing" if imbalances[-1] > imbalances[0] else "decreasing",
                    "stability_score": self._calculate_orderbook_stability(recent_history)
                }
            
            # –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑
            current_analysis = {
                "market_sentiment": orderbook.get("market_sentiment", "neutral"),
                "liquidity_score": self._calculate_liquidity_score(orderbook),
                "order_flow_pressure": self._calculate_order_flow_pressure(orderbook),
                "depth_imbalance": orderbook.get("order_imbalance", 0)
            }
            
            return {
                "current_orderbook": orderbook,
                "historical_analysis": history_analysis,
                "current_analysis": current_analysis,
                "top_levels": {
                    "bids": orderbook.get("bids", [])[:5],
                    "asks": orderbook.get("asks", [])[:5]
                }
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ä–¥–µ—Ä–±—É–∫–∞: {e}")
            return {}
    
    def _get_trading_activity_analysis(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if not self.trade_data:
            return {}
        
        try:
            recent_trades = self.trade_data[-100:]
            
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            buy_trades = [t for t in recent_trades if t["side"].upper() == "BUY"]
            sell_trades = [t for t in recent_trades if t["side"].upper() == "SELL"]
            large_trades = [t for t in recent_trades if t.get("is_large", False)]
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
            total_buy_volume = sum(t["size"] for t in buy_trades)
            total_sell_volume = sum(t["size"] for t in sell_trades)
            total_buy_value = sum(t.get("value", 0) for t in buy_trades)
            total_sell_value = sum(t.get("value", 0) for t in sell_trades)
            
            # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
            trade_prices = [t["price"] for t in recent_trades]
            price_impact = self._calculate_price_impact(recent_trades)
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            time_analysis = self._analyze_trading_time_patterns(recent_trades)
            
            return {
                "total_trades": len(recent_trades),
                "buy_sell_ratio": {
                    "trades": len(buy_trades) / len(sell_trades) if sell_trades else 0,
                    "volume": total_buy_volume / total_sell_volume if total_sell_volume > 0 else 0,
                    "value": total_buy_value / total_sell_value if total_sell_value > 0 else 0
                },
                "large_trades": {
                    "count": len(large_trades),
                    "percentage": (len(large_trades) / len(recent_trades)) * 100,
                    "avg_size": sum(t["size"] for t in large_trades) / len(large_trades) if large_trades else 0
                },
                "price_analysis": {
                    "avg_price": sum(trade_prices) / len(trade_prices) if trade_prices else 0,
                    "price_range": max(trade_prices) - min(trade_prices) if trade_prices else 0,
                    "price_impact": price_impact,
                    "trend": "up" if trade_prices[-1] > trade_prices[0] else "down" if len(trade_prices) > 1 else "neutral"
                },
                "time_patterns": time_analysis,
                "recent_trades_sample": recent_trades[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–¥–µ–ª–æ–∫
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return {}
    
    def _get_price_levels_analysis(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            support_clusters = self._cluster_price_levels(self.price_levels["support"])
            resistance_clusters = self._cluster_price_levels(self.price_levels["resistance"])
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            key_levels = self._identify_key_levels(support_clusters, resistance_clusters)
            
            return {
                "support_levels": support_clusters,
                "resistance_levels": resistance_clusters,
                "key_levels": key_levels,
                "current_price_context": self._analyze_current_price_context(key_levels),
                "level_strength": self._calculate_level_strength(support_clusters, resistance_clusters)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
            return {}
    
    def _get_volume_profile_analysis(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–∞"""
        try:
            if not self.volume_profile:
                return {}
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ –æ–±—ä–µ–º—É
            sorted_levels = sorted(self.volume_profile.items(), key=lambda x: x[1]["total_volume"], reverse=True)
            
            # VPOC (Volume Point of Control) - —É—Ä–æ–≤–µ–Ω—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –æ–±—ä–µ–º–æ–º
            vpoc = sorted_levels[0] if sorted_levels else None
            
            # –í—ã—Å–æ–∫–æ–æ–±—ä–µ–º–Ω—ã–µ —É–∑–ª—ã (HVN) –∏ –Ω–∏–∑–∫–æ–æ–±—ä–µ–º–Ω—ã–µ —É–∑–ª—ã (LVN)
            avg_volume = sum(data["total_volume"] for data in self.volume_profile.values()) / len(self.volume_profile)
            hvn_levels = [(price, data) for price, data in sorted_levels if data["total_volume"] > avg_volume * 1.5]
            lvn_levels = [(price, data) for price, data in sorted_levels if data["total_volume"] < avg_volume * 0.5]
            
            return {
                "vpoc": {"price": vpoc[0], "volume": vpoc[1]["total_volume"]} if vpoc else None,
                "high_volume_nodes": [{"price": price, "volume": data["total_volume"]} for price, data in hvn_levels[:10]],
                "low_volume_nodes": [{"price": price, "volume": data["total_volume"]} for price, data in lvn_levels[:10]],
                "volume_distribution": self._analyze_volume_distribution(),
                "price_acceptance": self._analyze_price_acceptance()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—ä–µ–º–∞: {e}")
            return {}
    
    def _get_microstructure_analysis(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä—ã–Ω–∫–∞"""
        try:
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            return {
                "liquidity_metrics": self._calculate_liquidity_metrics(),
                "order_flow_metrics": self._calculate_order_flow_metrics(),
                "price_discovery": self._analyze_price_discovery(),
                "market_efficiency": self._assess_market_efficiency(),
                "volatility_clustering": self._detect_volatility_clustering()
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return {}
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    
    def _calculate_volatility(self, prices: List[float]) -> float:
        """–†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if len(prices) < 2:
            return 0
        
        mean_price = sum(prices) / len(prices)
        variance = sum((price - mean_price) ** 2 for price in prices) / len(prices)
        return math.sqrt(variance) / mean_price * 100
    
    def _determine_price_trend(self, prices: List[float]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ —Ü–µ–Ω—ã"""
        if len(prices) < 2:
            return "neutral"
        
        recent_avg = sum(prices[-5:]) / len(prices[-5:])
        earlier_avg = sum(prices[-10:-5]) / len(prices[-10:-5]) if len(prices) >= 10 else prices[0]
        
        if recent_avg > earlier_avg * 1.002:
            return "uptrend"
        elif recent_avg < earlier_avg * 0.998:
            return "downtrend"
        else:
            return "sideways"
    
    def _determine_volume_trend(self, volumes: List[float]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –æ–±—ä–µ–º–∞"""
        if len(volumes) < 2:
            return "neutral"
        
        recent_avg = sum(volumes[-5:]) / len(volumes[-5:])
        earlier_avg = sum(volumes[-10:-5]) / len(volumes[-10:-5]) if len(volumes) >= 10 else volumes[0]
        
        if recent_avg > earlier_avg * 1.1:
            return "increasing"
        elif recent_avg < earlier_avg * 0.9:
            return "decreasing"
        else:
            return "stable"
    
    def _calculate_volume_price_correlation(self, prices: List[float], volumes: List[float]) -> float:
        """–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –æ–±—ä–µ–º–∞ –∏ —Ü–µ–Ω—ã"""
        if len(prices) != len(volumes) or len(prices) < 2:
            return 0
        
        # –ü—Ä–æ—Å—Ç–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        price_changes = [prices[i] - prices[i-1] for i in range(1, len(prices))]
        volume_changes = [volumes[i] - volumes[i-1] for i in range(1, len(volumes))]
        
        if not price_changes or not volume_changes:
            return 0
        
        mean_price_change = sum(price_changes) / len(price_changes)
        mean_volume_change = sum(volume_changes) / len(volume_changes)
        
        numerator = sum((price_changes[i] - mean_price_change) * (volume_changes[i] - mean_volume_change) for i in range(len(price_changes)))
        
        price_variance = sum((pc - mean_price_change) ** 2 for pc in price_changes)
        volume_variance = sum((vc - mean_volume_change) ** 2 for vc in volume_changes)
        
        denominator = math.sqrt(price_variance * volume_variance)
        
        return numerator / denominator if denominator != 0 else 0
    
    def _assess_data_quality(self) -> dict:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        return {
            "websocket_connected": self.is_connected,
            "data_freshness": time.time() - self.last_data_time,
            "klines_available": len(self.extended_kline_data),
            "orderbook_available": bool(self.orderbook_data),
            "trades_available": len(self.trade_data),
            "price_levels_identified": len(self.price_levels["support"]) + len(self.price_levels["resistance"]),
            "volume_profile_depth": len(self.volume_profile)
        }
    
    def _get_collection_period(self) -> dict:
        """–ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.extended_kline_data:
            return {}
        
        first_kline = self.extended_kline_data[0]
        last_kline = self.extended_kline_data[-1]
        
        return {
            "start_time": first_kline["datetime"].isoformat(),
            "end_time": last_kline["datetime"].isoformat(),
            "duration_minutes": (last_kline["datetime"] - first_kline["datetime"]).total_seconds() / 60,
            "timeframe": self.settings.STRATEGY_TIMEFRAME
        }
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
    
    def _calculate_orderbook_stability(self, history: List[dict]) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        return 0.5  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _calculate_liquidity_score(self, orderbook: dict) -> float:
        """–û—Ü–µ–Ω–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        return 0.5  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _calculate_order_flow_pressure(self, orderbook: dict) -> float:
        """–î–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä-—Ñ–ª–æ—É"""
        return 0.0  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _calculate_price_impact(self, trades: List[dict]) -> float:
        """–¶–µ–Ω–æ–≤–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ —Å–¥–µ–ª–æ–∫"""
        return 0.0  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _analyze_trading_time_patterns(self, trades: List[dict]) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return {}  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _cluster_price_levels(self, levels: List[dict]) -> List[dict]:
        """–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Ü–µ–Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π"""
        return levels[:10]  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _identify_key_levels(self, support: List[dict], resistance: List[dict]) -> dict:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π"""
        return {}  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _analyze_current_price_context(self, key_levels: dict) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        return {}  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _calculate_level_strength(self, support: List[dict], resistance: List[dict]) -> dict:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —É—Ä–æ–≤–Ω–µ–π"""
        return {}  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _analyze_volume_distribution(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–º–∞"""
        return {}  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _analyze_price_acceptance(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–Ω—è—Ç–∏—è —Ü–µ–Ω—ã"""
        return {}  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _calculate_liquidity_metrics(self) -> dict:
        """–ú–µ—Ç—Ä–∏–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
        return {}  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _calculate_order_flow_metrics(self) -> dict:
        """–ú–µ—Ç—Ä–∏–∫–∏ –æ—Ä–¥–µ—Ä-—Ñ–ª–æ—É"""
        return {}  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _analyze_price_discovery(self) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
        return {}  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _assess_market_efficiency(self) -> dict:
        """–û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"""
        return {}  # –ó–∞–≥–ª—É—à–∫–∞
    
    def _detect_volatility_clustering(self) -> dict:
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        return {}  # –ó–∞–≥–ª—É—à–∫–∞
    
    def get_connection_status(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return {
            "is_connected": self.is_connected,
            "reconnect_count": self.reconnect_count,
            "last_ping": self.last_ping,
            "last_data_time": self.last_data_time,
            "data_delay": time.time() - self.last_data_time if self.last_data_time else 0,
            "websocket_url": self.settings.websocket_url,
            "subscribed_symbol": self.symbol,
            "extended_data_available": {
                "klines": len(self.extended_kline_data),
                "orderbook_history": len(self.extended_orderbook_history),
                "volume_profile": len(self.volume_profile),
                "price_levels": len(self.price_levels["support"]) + len(self.price_levels["resistance"])
            }
        }
