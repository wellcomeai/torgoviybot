"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
–û–±–Ω–æ–≤–ª–µ–Ω–æ: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ conflict —Å multiple instances
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
import html
import json

# –ü–æ—à–∞–≥–æ–≤–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
TELEGRAM_AVAILABLE = False
telegram_import_error = None

try:
    import telegram
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
    TELEGRAM_AVAILABLE = True
except ImportError as e:
    telegram_import_error = str(e)

if TELEGRAM_AVAILABLE:
    try:
        from telegram.ext import (
            Application,
            CommandHandler,
            CallbackQueryHandler,
            MessageHandler,
            filters,
            ContextTypes
        )
        from telegram.constants import ParseMode
        from telegram.error import TelegramError, Conflict, NetworkError
    except ImportError as e:
        TELEGRAM_AVAILABLE = False
        telegram_import_error = str(e)

from config.settings import get_settings


class TelegramBot:
    """–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω conflict)"""
    
    def __init__(self, token: str, chat_id: str, websocket_manager=None, market_analyzer=None):
        self.token = token
        self.chat_id = chat_id
        self.websocket_manager = websocket_manager
        self.market_analyzer = market_analyzer
        self.settings = get_settings()
        
        self.application = None
        self.is_running = False
        self.is_starting = False  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        
        self.logger = logging.getLogger(__name__)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram
        if not TELEGRAM_AVAILABLE:
            self.logger.warning(f"‚ö†Ô∏è Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {telegram_import_error}")
            return
        
        self.logger.info("‚úÖ Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.notifications_enabled = True
        self.user_settings = {
            "notifications": True,
            "signal_types": ["BUY", "SELL"],
            "min_confidence": 0.7,
            "ai_analysis": True
        }
        
        # –ö—É–ª–¥–∞—É–Ω –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
        self.last_ai_analysis = None
        self.ai_analysis_in_progress = False
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏
        self.max_startup_retries = 3
        self.startup_retry_delay = 5
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ —Å —Ä–µ—à–µ–Ω–∏–µ–º conflict –ø—Ä–æ–±–ª–µ–º—ã"""
        if not TELEGRAM_AVAILABLE:
            self.logger.warning("‚ö†Ô∏è Telegram –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫.")
            return
            
        if not self.token or not self.chat_id:
            self.logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            return
        
        if self.is_starting or self.is_running:
            self.logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–ª–∏ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_starting = True
        
        try:
            self.logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
            self.logger.info(f"   Token: {self.token[:10]}...")
            self.logger.info(f"   Chat ID: {self.chat_id}")
            
            # –û—á–∏—Å—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            await self._cleanup_existing_connections()
            
            # –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Å retry logic
            for attempt in range(self.max_startup_retries):
                try:
                    await self._start_bot_instance()
                    break
                except Conflict as e:
                    self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - {e}")
                    if attempt < self.max_startup_retries - 1:
                        self.logger.info(f"üîÑ –û–∂–∏–¥–∞–Ω–∏–µ {self.startup_retry_delay} —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                        await asyncio.sleep(self.startup_retry_delay)
                    else:
                        raise
                except Exception as e:
                    self.logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ - {e}")
                    if attempt < self.max_startup_retries - 1:
                        await asyncio.sleep(self.startup_retry_delay)
                    else:
                        raise
            
            self.is_running = True
            self.logger.info("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")
            # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –≤–µ—Å—å –±–æ—Ç
        finally:
            self.is_starting = False
    
    async def _cleanup_existing_connections(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            self.logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            temp_app = Application.builder().token(self.token).build()
            await temp_app.initialize()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
                bot_info = await temp_app.bot.get_me()
                self.logger.info(f"ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É: @{bot_info.username}")
                
                # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –µ—Å—Ç—å
                webhook_info = await temp_app.bot.get_webhook_info()
                if webhook_info.url:
                    self.logger.info(f"üîó –£–¥–∞–ª—è–µ–º webhook: {webhook_info.url}")
                    await temp_app.bot.delete_webhook(drop_pending_updates=True)
                
                # –û—á–∏—â–∞–µ–º pending updates
                self.logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ pending updates...")
                await temp_app.bot.get_updates(offset=-1, limit=1, timeout=1)
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
            finally:
                await temp_app.shutdown()
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É: {e}")
    
    async def _start_bot_instance(self):
        """–ó–∞–ø—É—Å–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        await self._register_handlers()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
        await self._set_bot_commands()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
        await self.application.initialize()
        await self.application.start()
        
        # –ó–∞–ø—É—Å–∫ polling —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        await self.application.updater.start_polling(
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            allowed_updates=Update.ALL_TYPES,
            error_callback=self._handle_polling_error
        )
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self._send_startup_message()
    
    async def _handle_polling_error(self, update: object, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ polling"""
        try:
            exception = context.error
            
            if isinstance(exception, Conflict):
                self.logger.error("‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π!")
                self.logger.error("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                self.logger.error("   - –ó–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
                self.logger.error("   - –õ–æ–∫–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å Render")
                self.logger.error("   - –ù–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                await asyncio.sleep(10)
                
            elif isinstance(exception, NetworkError):
                self.logger.warning(f"‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {exception}")
                
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ polling: {exception}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")
    
    async def _send_startup_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            ai_status = "ü§ñ –í–∫–ª—é—á–µ–Ω" if self.market_analyzer and self.settings.is_openai_configured else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            
            startup_text = (
                "üöÄ <b>–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                f"üìä –ü–∞—Ä–∞: <code>{self.settings.TRADING_PAIR}</code>\n"
                f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: <code>{self.settings.STRATEGY_TIMEFRAME}</code>\n"
                f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: <b>RSI + MA</b>\n"
                f"ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑: {ai_status}\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ üëá"
            )
            
            await self.send_message(
                startup_text,
                reply_markup=self._get_main_keyboard()
            )
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
        if not TELEGRAM_AVAILABLE or not self.application:
            return
            
        try:
            self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
            
            self.is_running = False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            try:
                await self.send_message("üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ polling
            if self.application.updater.running:
                await self.application.updater.stop()
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if self.application.running:
                await self.application.stop()
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await self.application.shutdown()
            
            self.logger.info("‚úÖ Telegram –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –±–æ—Ç–∞: {e}")
    
    async def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        if not self.application:
            return
            
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self._cmd_start))
        self.application.add_handler(CommandHandler("help", self._cmd_help))
        self.application.add_handler(CommandHandler("status", self._cmd_status))
        self.application.add_handler(CommandHandler("market", self._cmd_market_analysis))
        self.application.add_handler(CommandHandler("ai", self._cmd_market_analysis))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self._handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self._handle_polling_error)
    
    async def _set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
        if not self.application:
            return
            
        commands = [
            BotCommand("start", "üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("help", "‚ùì –ü–æ–º–æ—â—å"),
            BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
            BotCommand("market", "ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"),
            BotCommand("ai", "ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞")
        ]
        
        await self.application.bot.set_my_commands(commands)
    
    def _get_main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –¢–û–õ–¨–ö–û –∫–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        if not TELEGRAM_AVAILABLE:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
        ai_available = self.market_analyzer and self.settings.is_openai_configured
        button_text = "ü§ñ –£–∑–Ω–∞—Ç—å —Ä—ã–Ω–æ–∫ (–ò–ò)" if ai_available else "üìà –£–∑–Ω–∞—Ç—å —Ä—ã–Ω–æ–∫ (–±–∞–∑–æ–≤—ã–π)"
        
        keyboard = [
            [
                InlineKeyboardButton(button_text, callback_data="ai_market_analysis")
            ]
        ]
        
        # –ï—Å–ª–∏ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if not ai_available:
            keyboard.append([
                InlineKeyboardButton("‚ÑπÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ò–ò", callback_data="ai_setup_info")
            ])
        
        return InlineKeyboardMarkup(keyboard)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ)
    async def _cmd_start(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        ai_status = "ü§ñ –í–∫–ª—é—á–µ–Ω" if self.market_analyzer and self.settings.is_openai_configured else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
        
        await update.message.reply_text(
            "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º!</b>\n\n"
            f"üìä –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: <code>{self.settings.TRADING_PAIR}</code>\n"
            f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: <code>{self.settings.STRATEGY_TIMEFRAME}</code>\n"
            f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: <b>RSI + Moving Average</b>\n"
            f"ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ GPT-4: {ai_status}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –æ—Ç –ò–ò üëá",
            parse_mode=ParseMode.HTML,
            reply_markup=self._get_main_keyboard()
        )
    
    async def _cmd_help(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/market - –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
/ai - –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞

<b>ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç:</b>
- üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
- üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞, TP –∏ SL
- üìà –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã
- ‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
- üí° –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

<b>üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:</b>
- –°–≤–µ—á–∏, –æ–±—ä–µ–º—ã, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
- –û—Ä–¥–µ—Ä–±—É–∫ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
- –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ GPT-4

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ò–ò-–∞–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä!
        """
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)
    
    async def _cmd_status(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /status"""
        ai_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if self.market_analyzer and self.settings.is_openai_configured else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
        ai_model = self.settings.OPENAI_MODEL if self.settings.is_openai_configured else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        status_text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>

<b>–¢–æ—Ä–≥–æ–≤–ª—è:</b>
–ü–∞—Ä–∞: <code>{self.settings.TRADING_PAIR}</code>
–¢–∞–π–º—Ñ—Ä–µ–π–º: <code>{self.settings.STRATEGY_TIMEFRAME}</code>
–†–µ–∂–∏–º: <code>{'TESTNET' if self.settings.BYBIT_WS_TESTNET else 'MAINNET'}</code>

<b>WebSocket:</b> {'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' if self.websocket_manager and self.websocket_manager.is_connected else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}

<b>ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑:</b>
–°—Ç–∞—Ç—É—Å: {ai_status}
–ú–æ–¥–µ–ª—å: <code>{ai_model}</code>
–ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {'üîÑ –î–∞' if self.ai_analysis_in_progress else '‚úÖ –ù–µ—Ç'}

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>
        """
        
        await update.message.reply_text(status_text, parse_mode=ParseMode.HTML)
    
    async def _cmd_market_analysis(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /market –∏–ª–∏ /ai - –∑–∞–ø—É—Å–∫ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞"""
        await self._perform_ai_market_analysis(update.message.chat_id)
    
    async def _handle_callback(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "ai_market_analysis":
            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            await self._perform_ai_market_analysis(query.message.chat_id, query.message.message_id)
            
        elif data == "ai_setup_info":
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ò–ò
            setup_text = """
ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞</b>

–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:

1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á OpenAI:
   ‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ platform.openai.com
   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å API key
   ‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å

2Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
   <code>OPENAI_API_KEY=sk-your_key_here</code>

3Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞

<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b>
- GPT-4: ~$0.03-0.06 –∑–∞ –∞–Ω–∞–ª–∏–∑
- GPT-3.5: ~$0.002-0.004 –∑–∞ –∞–Ω–∞–ª–∏–∑

<b>üéØ –ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:</b>
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
- Take Profit –∏ Stop Loss —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã
            """
            
            await query.edit_message_text(
                setup_text,
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
            
        elif data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            await query.edit_message_text(
                "ü§ñ <b>–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ üëá",
                parse_mode=ParseMode.HTML,
                reply_markup=self._get_main_keyboard()
            )
    
    async def _handle_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        
        if any(keyword in text for keyword in ["–∞–Ω–∞–ª–∏–∑", "—Ä—ã–Ω–æ–∫", "market", "analysis", "–∏–∏", "ai", "–≥–ø—Ç", "gpt"]):
            await self._perform_ai_market_analysis(update.message.chat_id)
        elif "—Å—Ç–∞—Ç—É—Å" in text or "status" in text:
            await self._cmd_status(update, context)
        else:
            await update.message.reply_text(
                "ü§ñ <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞:</b>\n\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
                "‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /market\n"
                "‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞'\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏",
                parse_mode=ParseMode.HTML,
                reply_markup=self._get_main_keyboard()
            )
    
    async def _perform_ai_market_analysis(self, chat_id: int, message_id: Optional[int] = None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
            if self._is_analysis_cooldown():
                await self.send_message(
                    f"‚è≥ <b>–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ</b>\n\n"
                    f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {self.settings.AI_ANALYSIS_COOLDOWN_MINUTES} –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏",
                    chat_id=chat_id
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            if self.ai_analysis_in_progress:
                await self.send_message(
                    "üîÑ <b>–ê–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</b>\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...",
                    chat_id=chat_id
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not self.market_analyzer:
                await self.send_message(
                    "‚ùå <b>–ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OPENAI_API_KEY –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞",
                    chat_id=chat_id
                )
                return
            
            if not self.settings.is_openai_configured:
                await self.send_message(
                    "‚ùå <b>OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
                    "<code>OPENAI_API_KEY=sk-your_key_here</code>\n\n"
                    "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: https://platform.openai.com",
                    parse_mode=ParseMode.HTML,
                    chat_id=chat_id
                )
                return
            
            # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑
            self.ai_analysis_in_progress = True
            self.last_ai_analysis = datetime.now()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await self.send_message(
                "ü§ñ <b>–ó–∞–ø—É—Å–∫ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...</b>\n\n"
                "üîç –°–æ–±–∏—Ä–∞—é —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...\n"
                "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã...\n"
                "üß† –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ GPT-4...\n\n"
                "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥",
                chat_id=chat_id
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            market_data, ai_analysis = await self.market_analyzer.analyze_market(self.settings.TRADING_PAIR)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if not market_data and not ai_analysis:
                await self.send_message(
                    "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑</b>\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä—ã–Ω–∫—É\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å OpenAI API\n"
                    "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                    chat_id=chat_id
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if market_data:
                market_message = self.market_analyzer.format_market_data_message(market_data)
                await self.send_message(market_message, chat_id=chat_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑ (–≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            if ai_analysis and not ai_analysis.startswith("‚ùå"):
                analysis_message = f"ü§ñ <b>–ò–ò-–ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê (GPT-4)</b>\n\n{ai_analysis}"
                await self.send_message(analysis_message, chat_id=chat_id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                await self.send_message(
                    "‚úÖ <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                    reply_markup=self._get_main_keyboard(),
                    chat_id=chat_id
                )
            else:
                # –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ
                error_message = ai_analysis if ai_analysis else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ò–ò-–∞–Ω–∞–ª–∏–∑"
                await self.send_message(error_message, chat_id=chat_id)
            
            self.logger.info(f"‚úÖ –ò–ò-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞: {e}")
            await self.send_message(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n"
                f"<code>{str(e)}</code>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                parse_mode=ParseMode.HTML,
                chat_id=chat_id
            )
        finally:
            self.ai_analysis_in_progress = False
    
    def _is_analysis_cooldown(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞"""
        if not self.last_ai_analysis or self.settings.AI_ANALYSIS_COOLDOWN_MINUTES == 0:
            return False
        
        cooldown_minutes = self.settings.AI_ANALYSIS_COOLDOWN_MINUTES
        time_diff = datetime.now() - self.last_ai_analysis
        
        return time_diff < timedelta(minutes=cooldown_minutes)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
    async def send_signal_notification(self, signal_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
        if not TELEGRAM_AVAILABLE or not self.is_running:
            self.logger.info(f"üì§ [Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω] –°–∏–≥–Ω–∞–ª: {signal_data.get('signal_type', 'N/A')} {signal_data.get('symbol', 'N/A')}")
            return
            
        try:
            if not self.user_settings["notifications"]:
                return
            
            signal_type = signal_data.get("signal_type", "")
            confidence = signal_data.get("confidence", 0)
            
            if signal_type not in self.user_settings["signal_types"]:
                return
                
            if confidence < self.user_settings["min_confidence"]:
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ
            signal_emoji = "üü¢" if signal_type == "BUY" else "üî¥" if signal_type == "SELL" else "üîµ"
            confidence_stars = "‚≠ê" * min(5, int(confidence * 5))
            
            text = f"""
üö® <b>–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ!</b>

{signal_emoji} <b>{signal_type} {signal_data.get('symbol', '')}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> <code>${signal_data.get('price', 0):.4f}</code>
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> <code>{confidence:.1%}</code> {confidence_stars}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}

üí≠ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {signal_data.get('reason', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}

‚ö†Ô∏è <i>–¢–æ—Ä–≥—É–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!</i>
            """
            
            await self.send_message(text)
            self.logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–≥–Ω–∞–ª–µ: {signal_type} {signal_data.get('symbol', '')}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def send_message(self, text: str, reply_markup=None, chat_id: Optional[int] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if not TELEGRAM_AVAILABLE or not self.application or not self.is_running:
            self.logger.info(f"üì§ [Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω] {text[:100]}...")
            return
            
        try:
            target_chat_id = chat_id or self.chat_id
            
            await self.application.bot.send_message(
                chat_id=target_chat_id,
                text=text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
        except Conflict as e:
            self.logger.error(f"‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram: {e}")
    
    def get_bot_status(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
        return {
            "is_running": self.is_running,
            "is_starting": self.is_starting,
            "telegram_available": TELEGRAM_AVAILABLE,
            "ai_analyzer_available": self.market_analyzer is not None,
            "openai_configured": self.settings.is_openai_configured,
            "ai_analysis_in_progress": self.ai_analysis_in_progress,
            "last_ai_analysis": self.last_ai_analysis.isoformat() if self.last_ai_analysis else None,
            "notifications_enabled": self.notifications_enabled,
            "user_settings": self.user_settings,
            "max_startup_retries": self.max_startup_retries
        }
