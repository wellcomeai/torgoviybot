"""
–ë–∞–∑–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
RSI + Moving Average —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤
"""

import logging
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass

from config.settings import get_settings


@dataclass
class TradingSignal:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
    signal_id: str
    symbol: str
    signal_type: str  # BUY, SELL, HOLD
    price: float
    confidence: float  # 0.0 - 1.0
    timestamp: datetime
    reason: str
    indicators: dict
    timeframe: str


class TechnicalIndicators:
    """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    
    @staticmethod
    def sma(data: List[float], period: int) -> float:
        """–ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è"""
        if len(data) < period:
            return 0.0
        return sum(data[-period:]) / period
    
    @staticmethod
    def ema(data: List[float], period: int) -> float:
        """–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è"""
        if len(data) < period:
            return 0.0
        
        multiplier = 2 / (period + 1)
        ema_values = [data[0]]  # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        for price in data[1:]:
            ema_value = (price * multiplier) + (ema_values[-1] * (1 - multiplier))
            ema_values.append(ema_value)
        
        return ema_values[-1]
    
    @staticmethod
    def rsi(data: List[float], period: int = 14) -> float:
        """Relative Strength Index"""
        if len(data) < period + 1:
            return 50.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        gains = []
        losses = []
        
        for i in range(1, len(data)):
            change = data[i] - data[i-1]
            if change > 0:
                gains.append(change)
                losses.append(0)
            else:
                gains.append(0)
                losses.append(abs(change))
        
        if len(gains) < period:
            return 50.0
        
        avg_gain = sum(gains[-period:]) / period
        avg_loss = sum(losses[-period:]) / period
        
        if avg_loss == 0:
            return 100.0
        
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        
        return rsi
    
    @staticmethod
    def macd(data: List[float], fast: int = 12, slow: int = 26, signal: int = 9) -> Dict[str, float]:
        """MACD –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä"""
        if len(data) < slow:
            return {"macd": 0, "signal": 0, "histogram": 0}
        
        ema_fast = TechnicalIndicators.ema(data, fast)
        ema_slow = TechnicalIndicators.ema(data, slow)
        
        macd_line = ema_fast - ema_slow
        
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, signal line = –ø—Ä–æ—Å—Ç–∞—è —Å—Ä–µ–¥–Ω—è—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π MACD
        signal_line = macd_line * 0.9  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        histogram = macd_line - signal_line
        
        return {
            "macd": macd_line,
            "signal": signal_line,
            "histogram": histogram
        }
    
    @staticmethod
    def bollinger_bands(data: List[float], period: int = 20, std_dev: int = 2) -> Dict[str, float]:
        """–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"""
        if len(data) < period:
            middle = data[-1] if data else 0
            return {"upper": middle, "middle": middle, "lower": middle}
        
        sma = TechnicalIndicators.sma(data, period)
        variance = sum([(x - sma) ** 2 for x in data[-period:]]) / period
        std = variance ** 0.5
        
        return {
            "upper": sma + (std * std_dev),
            "middle": sma,
            "lower": sma - (std * std_dev)
        }


class BaseStrategy:
    """–ë–∞–∑–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è RSI + MA"""
    
    def __init__(self, symbol: str, timeframe: str = "5m"):
        self.settings = get_settings()
        self.symbol = symbol
        self.timeframe = timeframe
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.kline_data = []
        self.ticker_data = {}
        self.orderbook_data = {}
        self.trade_data = []
        
        # –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        self.close_prices = []
        self.high_prices = []
        self.low_prices = []
        self.volumes = []
        
        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        self.signals_history = []
        self.last_signal_time = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.current_indicators = {}
        self.is_active = True
        
        self.logger = logging.getLogger(__name__)
        self.logger.info(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {symbol} ({timeframe})")
    
    def update_ticker(self, ticker_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ticker –¥–∞–Ω–Ω—ã—Ö"""
        self.ticker_data = ticker_data
    
    def update_orderbook(self, orderbook_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ orderbook –¥–∞–Ω–Ω—ã—Ö"""
        self.orderbook_data = orderbook_data
    
    def update_trades(self, trades: List[dict]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö"""
        self.trade_data.extend(trades)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        if len(self.trade_data) > 1000:
            self.trade_data = self.trade_data[-1000:]
    
    async def analyze_kline(self, kline: dict) -> Optional[TradingSignal]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–π —Å–≤–µ—á–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏
            self.kline_data.append(kline)
            self.close_prices.append(kline["close"])
            self.high_prices.append(kline["high"])
            self.low_prices.append(kline["low"])
            self.volumes.append(kline["volume"])
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            max_data = self.settings.KLINE_LIMIT
            if len(self.close_prices) > max_data:
                self.close_prices = self.close_prices[-max_data:]
                self.high_prices = self.high_prices[-max_data:]
                self.low_prices = self.low_prices[-max_data:]
                self.volumes = self.volumes[-max_data:]
                self.kline_data = self.kline_data[-max_data:]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
            if kline.get("confirm", False) and len(self.close_prices) >= 30:
                return await self._generate_signal()
            
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ kline: {e}")
            return None
    
    async def _generate_signal(self) -> Optional[TradingSignal]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
            if self._is_signal_cooldown():
                return None
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators = self._calculate_indicators()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
            signal_type, confidence, reason = self._analyze_conditions(indicators)
            
            if signal_type == "HOLD" or confidence < self.settings.MIN_SIGNAL_CONFIDENCE:
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª
            signal = TradingSignal(
                signal_id=f"{self.symbol}_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                symbol=self.symbol,
                signal_type=signal_type,
                price=self.close_prices[-1],
                confidence=confidence,
                timestamp=datetime.now(),
                reason=reason,
                indicators=indicators,
                timeframe=self.timeframe
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
            self.signals_history.append(signal)
            self.last_signal_time = datetime.now()
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
            if len(self.signals_history) > 100:
                self.signals_history = self.signals_history[-100:]
            
            self.logger.info(f"üéØ –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_type} {self.symbol} @ {signal.price:.4f} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})")
            self.logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            
            return signal
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    def _calculate_indicators(self) -> dict:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        indicators = {}
        
        try:
            # RSI
            indicators["rsi"] = TechnicalIndicators.rsi(
                self.close_prices, 
                self.settings.RSI_PERIOD
            )
            
            # Moving Averages
            indicators["sma_short"] = TechnicalIndicators.sma(
                self.close_prices, 
                self.settings.MA_SHORT_PERIOD
            )
            indicators["sma_long"] = TechnicalIndicators.sma(
                self.close_prices, 
                self.settings.MA_LONG_PERIOD
            )
            
            # EMA
            indicators["ema_short"] = TechnicalIndicators.ema(
                self.close_prices, 
                self.settings.MA_SHORT_PERIOD
            )
            indicators["ema_long"] = TechnicalIndicators.ema(
                self.close_prices, 
                self.settings.MA_LONG_PERIOD
            )
            
            # MACD
            macd_data = TechnicalIndicators.macd(self.close_prices)
            indicators.update(macd_data)
            
            # Bollinger Bands
            bb_data = TechnicalIndicators.bollinger_bands(self.close_prices)
            indicators.update({f"bb_{k}": v for k, v in bb_data.items()})
            
            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            indicators["current_price"] = self.close_prices[-1]
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞ 20 –ø–µ—Ä–∏–æ–¥–æ–≤)
            if len(self.close_prices) >= 20:
                recent_prices = self.close_prices[-20:]
                mean_price = sum(recent_prices) / len(recent_prices)
                variance = sum((price - mean_price) ** 2 for price in recent_prices) / len(recent_prices)
                indicators["volatility"] = (variance ** 0.5) / mean_price * 100
            else:
                indicators["volatility"] = 0
            
            # –û–±—ä–µ–º (—Å—Ä–µ–¥–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π)
            if len(self.volumes) >= 10:
                indicators["avg_volume"] = sum(self.volumes[-10:]) / 10
            else:
                indicators["avg_volume"] = self.volumes[-1] if self.volumes else 0
            
            self.current_indicators = indicators
            return indicators
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return {}
    
    def _analyze_conditions(self, indicators: dict) -> tuple:
        """–ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞"""
        if not indicators:
            return "HOLD", 0.0, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"
        
        signals = []
        reasons = []
        
        # RSI –∞–Ω–∞–ª–∏–∑
        rsi = indicators.get("rsi", 50)
        if rsi <= self.settings.RSI_OVERSOLD:
            signals.append(("BUY", 0.8, f"RSI –ø–µ—Ä–µ—Å—ã—â–µ–Ω: {rsi:.1f}"))
        elif rsi >= self.settings.RSI_OVERBOUGHT:
            signals.append(("SELL", 0.8, f"RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω: {rsi:.1f}"))
        
        # Moving Average –∞–Ω–∞–ª–∏–∑
        sma_short = indicators.get("sma_short", 0)
        sma_long = indicators.get("sma_long", 0)
        current_price = indicators.get("current_price", 0)
        
        if sma_short > sma_long and current_price > sma_short:
            signals.append(("BUY", 0.6, f"–¶–µ–Ω–∞ –≤—ã—à–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö MA"))
        elif sma_short < sma_long and current_price < sma_short:
            signals.append(("SELL", 0.6, f"–¶–µ–Ω–∞ –Ω–∏–∂–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö MA"))
        
        # MACD –∞–Ω–∞–ª–∏–∑
        macd = indicators.get("macd", 0)
        macd_signal = indicators.get("signal", 0)
        if macd > macd_signal and macd > 0:
            signals.append(("BUY", 0.5, "MACD –±—ã—á–∏–π"))
        elif macd < macd_signal and macd < 0:
            signals.append(("SELL", 0.5, "MACD –º–µ–¥–≤–µ–∂–∏–π"))
        
        # Bollinger Bands –∞–Ω–∞–ª–∏–∑
        bb_lower = indicators.get("bb_lower", 0)
        bb_upper = indicators.get("bb_upper", 0)
        if current_price <= bb_lower:
            signals.append(("BUY", 0.7, "–¶–µ–Ω–∞ –∫–∞—Å–∞–µ—Ç—Å—è –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"))
        elif current_price >= bb_upper:
            signals.append(("SELL", 0.7, "–¶–µ–Ω–∞ –∫–∞—Å–∞–µ—Ç—Å—è –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞"))
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
        avg_volume = indicators.get("avg_volume", 0)
        current_volume = self.volumes[-1] if self.volumes else 0
        if current_volume > avg_volume * 1.5:  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
            volume_boost = 0.1
        else:
            volume_boost = 0
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        if not signals:
            return "HOLD", 0.0, "–ù–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞
        buy_signals = [s for s in signals if s[0] == "BUY"]
        sell_signals = [s for s in signals if s[0] == "SELL"]
        
        if len(buy_signals) > len(sell_signals):
            total_confidence = min(sum(s[1] for s in buy_signals) / len(buy_signals) + volume_boost, 1.0)
            combined_reason = " + ".join([s[2] for s in buy_signals])
            return "BUY", total_confidence, combined_reason
        elif len(sell_signals) > len(buy_signals):
            total_confidence = min(sum(s[1] for s in sell_signals) / len(sell_signals) + volume_boost, 1.0)
            combined_reason = " + ".join([s[2] for s in sell_signals])
            return "SELL", total_confidence, combined_reason
        else:
            return "HOLD", 0.0, "–ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"
    
    def _is_signal_cooldown(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏"""
        if not self.last_signal_time:
            return False
        
        cooldown_minutes = self.settings.SIGNAL_COOLDOWN_MINUTES
        time_diff = datetime.now() - self.last_signal_time
        
        return time_diff < timedelta(minutes=cooldown_minutes)
    
    def get_current_data(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            "symbol": self.symbol,
            "timeframe": self.timeframe,
            "is_active": self.is_active,
            "klines_count": len(self.kline_data),
            "prices_count": len(self.close_prices),
            "current_indicators": self.current_indicators,
            "last_price": self.close_prices[-1] if self.close_prices else 0,
            "signals_today": len([s for s in self.signals_history 
                                  if s.timestamp.date() == datetime.now().date()]),
            "last_signal": self.signals_history[-1].__dict__ if self.signals_history else None
        }
    
    def get_recent_signals(self, limit: int = 10) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
        recent_signals = self.signals_history[-limit:] if self.signals_history else []
        return [signal.__dict__ for signal in recent_signals]
    
    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        return {
            "strategy_name": "RSI + Moving Average",
            "symbol": self.symbol,
            "timeframe": self.timeframe,
            "is_active": self.is_active,
            "data_points": len(self.close_prices),
            "total_signals": len(self.signals_history),
            "signals_today": len([s for s in self.signals_history 
                                  if s.timestamp.date() == datetime.now().date()]),
            "last_signal_time": self.last_signal_time.isoformat() if self.last_signal_time else None,
            "current_indicators": self.current_indicators,
            "settings": {
                "rsi_period": self.settings.RSI_PERIOD,
                "rsi_oversold": self.settings.RSI_OVERSOLD,
                "rsi_overbought": self.settings.RSI_OVERBOUGHT,
                "ma_short": self.settings.MA_SHORT_PERIOD,
                "ma_long": self.settings.MA_LONG_PERIOD,
                "min_confidence": self.settings.MIN_SIGNAL_CONFIDENCE,
                "cooldown_minutes": self.settings.SIGNAL_COOLDOWN_MINUTES
            }
        }
